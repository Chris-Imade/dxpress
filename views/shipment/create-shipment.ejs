<!-- Banner start -->
<section
  class="banner-inner d-flex align-items-center position-relative overflow-hidden z-1"
>
  <div
    class="banner-bg position-absolute top-0 tw-start-0 h-100 w-100 bg-img z-n1"
    data-background-image="/assets/images/thumbs/banner-inner-bg1.png"
  ></div>
  <div class="container position-relative tw-pb-21 tw-pt-400-px">
    <div
      class="banner-inner__content max-w-850-px tw-mx-auto position-absolute top-50 tw-start-50 tw--translate-x-50 tw--translate-y-50 w-100 h-100 d-flex flex-column justify-content-center"
    >
      <h1 class="tw-mb-15 text-white text-center">Create Shipment</h1>
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb justify-content-center">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item active" aria-current="page">
            Create Shipment
          </li>
        </ol>
      </nav>
    </div>
  </div>
</section>
<!-- Banner end -->

<!-- Create Shipment Section start -->
<section class="py-100">
  <div class="container">
    <div class="row">
      <div class="col-lg-10 mx-auto">
        <div
          class="create-shipment-wrapper bg-white p-4 p-md-5 common-shadow-three tw-rounded-xl"
          style="margin-top: 4rem; margin-bottom: 3rem"
        >
          <!-- Step Navigation -->
          <div class="step-navigation mb-5">
            <div class="step-progress">
              <div class="progress" style="height: 10px">
                <div
                  class="progress-bar"
                  role="progressbar"
                  style="width: 0%"
                  id="stepProgressBar"
                  aria-valuenow="0"
                  aria-valuemin="0"
                  aria-valuemax="100"
                ></div>
              </div>
              <div class="step-labels">
                <span class="step-label active" data-step="1"
                  >Shipment Details</span
                >
                <span class="step-label" data-step="2">Compare Rates</span>
                <span class="step-label" data-step="3">Payment</span>
                <span class="step-label" data-step="4">Confirmation</span>
              </div>
            </div>
          </div>

          <!-- Step 1: Shipment Details Form -->
          <div class="step-content" id="step1">
            <h3 class="mb-4">Shipment Details</h3>
            <form id="shipmentDetailsForm">
              <!-- Customer Information -->
              <div class="mb-4">
                <h5 class="mb-3">Customer Information</h5>
                <div class="row g-3">
                  <div class="col-md-6">
                    <label for="customerName" class="form-label"
                      >Full Name</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="customerName"
                      required
                    />
                  </div>
                  <div class="col-md-6">
                    <label for="customerEmail" class="form-label"
                      >Email Address</label
                    >
                    <input
                      type="email"
                      class="form-control"
                      id="customerEmail"
                      required
                    />
                  </div>
                  <div class="col-md-6">
                    <label for="customerPhone" class="form-label"
                      >Phone Number</label
                    >
                    <input
                      type="tel"
                      class="form-control"
                      id="customerPhone"
                      required
                    />
                  </div>
                </div>
              </div>

              <!-- Origin Address -->
              <div class="mb-4">
                <h5 class="mb-3">Origin Address</h5>
                <div class="row g-3">
                  <div class="col-md-12">
                    <label for="originAddress" class="form-label"
                      >Street Address</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="originAddress"
                      required
                    />
                  </div>
                  <div class="col-md-4">
                    <label for="originCity" class="form-label">City</label>
                    <input
                      type="text"
                      class="form-control"
                      id="originCity"
                      required
                    />
                  </div>
                  <div class="col-md-4">
                    <label for="originPostalCode" class="form-label"
                      >Postal Code</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="originPostalCode"
                      required
                    />
                  </div>
                  <div class="col-md-4">
                    <label for="originCountry" class="form-label"
                      >Country</label
                    >
                    <select class="form-select" id="originCountry" required>
                      <option value="">Select Country</option>
                      <option value="UK">United Kingdom</option>
                      <option value="US">United States</option>
                      <option value="CA">Canada</option>
                      <option value="AU">Australia</option>
                      <option value="FR">France</option>
                      <option value="DE">Germany</option>
                      <option value="IT">Italy</option>
                      <option value="ES">Spain</option>
                      <option value="NL">Netherlands</option>
                      <option value="JP">Japan</option>
                    </select>
                  </div>
                </div>
              </div>

              <!-- Destination Address -->
              <div class="mb-4">
                <h5 class="mb-3">Destination Address</h5>
                <div class="row g-3">
                  <div class="col-md-12">
                    <label for="destAddress" class="form-label"
                      >Street Address</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="destAddress"
                      required
                    />
                  </div>
                  <div class="col-md-4">
                    <label for="destCity" class="form-label">City</label>
                    <input
                      type="text"
                      class="form-control"
                      id="destCity"
                      required
                    />
                  </div>
                  <div class="col-md-4">
                    <label for="destPostalCode" class="form-label"
                      >Postal Code</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="destPostalCode"
                      required
                    />
                  </div>
                  <div class="col-md-4">
                    <label for="destCountry" class="form-label">Country</label>
                    <select class="form-select" id="destCountry" required>
                      <option value="">Select Country</option>
                      <option value="UK">United Kingdom</option>
                      <option value="US">United States</option>
                      <option value="CA">Canada</option>
                      <option value="AU">Australia</option>
                      <option value="FR">France</option>
                      <option value="DE">Germany</option>
                      <option value="IT">Italy</option>
                      <option value="ES">Spain</option>
                      <option value="NL">Netherlands</option>
                      <option value="JP">Japan</option>
                    </select>
                  </div>
                </div>
              </div>

              <!-- Package Details -->
              <div class="mb-4">
                <h5 class="mb-3">Package Details</h5>
                <div class="row g-3">
                  <div class="col-md-6">
                    <label for="packageType" class="form-label"
                      >Package Type</label
                    >
                    <select class="form-select" id="packageType" required>
                      <option value="">Select Package Type</option>
                      <option value="envelope">Envelope</option>
                      <option value="small_box">Small Box</option>
                      <option value="medium_box">Medium Box</option>
                      <option value="large_box">Large Box</option>
                      <option value="pallet">Pallet</option>
                    </select>
                  </div>
                  <div class="col-md-6">
                    <label for="weight" class="form-label">Weight (kg)</label>
                    <input
                      type="number"
                      class="form-control"
                      id="weight"
                      min="0.1"
                      step="0.1"
                      required
                    />
                  </div>
                  <div class="col-md-4">
                    <label for="length" class="form-label">Length (cm)</label>
                    <input
                      type="number"
                      class="form-control"
                      id="length"
                      min="1"
                      step="0.1"
                    />
                  </div>
                  <div class="col-md-4">
                    <label for="width" class="form-label">Width (cm)</label>
                    <input
                      type="number"
                      class="form-control"
                      id="width"
                      min="1"
                      step="0.1"
                    />
                  </div>
                  <div class="col-md-4">
                    <label for="height" class="form-label">Height (cm)</label>
                    <input
                      type="number"
                      class="form-control"
                      id="height"
                      min="1"
                      step="0.1"
                    />
                  </div>
                </div>
              </div>

              <!-- Additional Options -->
              <div class="mb-4">
                <h5 class="mb-3">Additional Options</h5>
                <div class="row g-3">
                  <div class="col-md-6">
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        id="isFragile"
                      />
                      <label class="form-check-label" for="isFragile">
                        Fragile Handling
                      </label>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-check">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        id="insuranceRequired"
                      />
                      <label class="form-check-label" for="insuranceRequired">
                        Insurance Required
                      </label>
                    </div>
                  </div>
                  <div
                    class="col-md-12 insurance-details"
                    style="display: none"
                  >
                    <label for="declaredValue" class="form-label"
                      >Declared Value (£)</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      id="declaredValue"
                      min="0"
                      step="0.01"
                    />
                  </div>
                </div>
              </div>

              <div class="d-flex justify-content-end mt-4">
                <button type="submit" class="btn btn-main hover-style-two">
                  Compare Rates <i class="fas fa-arrow-right ms-2"></i>
                </button>
              </div>
            </form>
          </div>

          <!-- Step 2: Compare Rates -->
          <div class="step-content" id="step2" style="display: none">
            <h3 class="mb-4">Compare Shipping Rates</h3>
            <div id="loadingRates" class="text-center py-5">
              <div class="spinner-border text-main-600" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-3">
                Calculating shipping rates from multiple carriers...
              </p>
            </div>
            <div id="shippingRates" class="mt-4" style="display: none">
              <!-- Shipping rates will be displayed here -->
              <div class="row" id="ratesContainer">
                <!-- Rates cards will be inserted here by JavaScript -->
              </div>
            </div>
            <div class="d-flex justify-content-between mt-4">
              <button
                type="button"
                class="btn btn-outline-secondary back-btn"
                data-step="1"
              >
                <i class="fas fa-arrow-left me-2"></i> Back
              </button>
              <button
                type="button"
                class="btn btn-main hover-style-two continue-btn"
                id="selectRateBtn"
                disabled
              >
                Continue to Payment <i class="fas fa-arrow-right ms-2"></i>
              </button>
            </div>
          </div>

          <!-- Step 3: Payment -->
          <div class="step-content" id="step3" style="display: none">
            <h3 class="mb-4">Payment | Shipment Summary</h3>

            <!-- Add status message container -->
            <div id="paymentStatus" class="mb-4"></div>

            <div class="selected-rate-summary mb-4">
              <div class="card">
                <div class="card-body">
                  <div class="row">
                    <div class="col-md-6">
                      <div class="summary-item">
                        <i class="fas fa-truck text-main-600 me-2"></i>
                        <span
                          ><strong>Carrier:</strong>
                          <span id="summaryCarrier"></span
                        ></span>
                      </div>
                      <div class="summary-item">
                        <i class="fas fa-box text-main-600 me-2"></i>
                        <span
                          ><strong>Service:</strong>
                          <span id="summaryService"></span
                        ></span>
                      </div>
                      <div class="summary-item">
                        <i class="fas fa-calendar-alt text-main-600 me-2"></i>
                        <span
                          ><strong>Delivery Estimate:</strong>
                          <span id="summaryDelivery"></span
                        ></span>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="summary-item">
                        <i class="fas fa-pound-sign text-main-600 me-2"></i>
                        <span
                          ><strong>Base Rate:</strong> £<span
                            id="summaryBaseRate"
                          ></span
                        ></span>
                      </div>
                      <div class="summary-item">
                        <i class="fas fa-plus-circle text-main-600 me-2"></i>
                        <span
                          ><strong>Additional Services:</strong> £<span
                            id="summaryAdditional"
                          ></span
                        ></span>
                      </div>
                      <div class="summary-item total">
                        <i class="fas fa-receipt text-main-600 me-2"></i>
                        <span
                          ><strong>Total:</strong> £<span
                            id="summaryTotal"
                          ></span
                        ></span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="payment-methods mb-4">
              <h5 class="mb-3">Select Payment Method</h5>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <div class="card payment-card cursor-pointer">
                    <div class="card-body">
                      <div
                        class="form-check"
                        style="display: flex; align-items: center"
                      >
                        <input
                          class="form-check-input"
                          type="radio"
                          name="paymentMethod"
                          id="paymentStripe"
                          value="stripe"
                          checked
                        />
                        <label
                          class="form-check-label d-flex align-items-center"
                          for="paymentStripe"
                        >
                          <img
                            src="/assets/images/payment/stripe.png"
                            alt="Stripe"
                            height="30"
                            class="me-2"
                            style="width: 70px; margin-left: 10px"
                          />
                          Pay with Stripe
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-md-6 mb-3">
                  <div class="card payment-card cursor-pointer">
                    <div class="card-body">
                      <div
                        class="form-check"
                        style="display: flex; align-items: center"
                      >
                        <input
                          class="form-check-input"
                          type="radio"
                          name="paymentMethod"
                          id="paymentPaypal"
                          value="paypal"
                        />
                        <label
                          class="form-check-label d-flex align-items-center"
                          for="paymentPaypal"
                        >
                          <img
                            src="/assets/images/payment/paypal.png"
                            alt="PayPal"
                            height="30"
                            class="me-2"
                            style="width: 70px; margin-left: 10px"
                          />
                          Pay with PayPal
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div id="stripePaymentForm">
              <div class="card">
                <div class="card-body">
                  <div class="total-price-display mb-4">
                    <h4 class="text-center">
                      Total Amount: £<span id="stripeTotalPrice">0.00</span>
                    </h4>
                  </div>
                  <div id="stripe-payment-element"></div>
                </div>
              </div>
            </div>

            <div id="paypalPaymentForm" style="display: none">
              <div class="card">
                <div class="card-body text-center">
                  <div class="total-price-display mb-4">
                    <h4 class="text-center">
                      Total Amount: £<span id="paypalTotalPrice">0.00</span>
                    </h4>
                  </div>
                  <script src="https://www.paypal.com/sdk/js?client-id=<%- process.env.PAYPAL_CLIENT_ID %>&amp;components=hosted-buttons&amp;disable-funding=venmo&amp;currency=GBP"></script>
                  <div class="paypal-container w-100"></div>
                  <script>
                    // Define updatePayPalButton with error handling
                    function updatePayPalButton(amount) {
                      // Check if paypal is available
                      if (typeof paypal === "undefined") {
                        console.error("PayPal SDK not loaded yet");
                        return;
                      }

                      try {
                        paypal
                          .HostedButtons({
                            hostedButtonId:
                              "<%- process.env.PAYPAL_HOSTED_BUTTON_ID %>",
                            style: {
                              layout: "vertical",
                              color: "blue",
                              shape: "rect",
                              label: "pay",
                            },
                            createOrder: function () {
                              return fetch("/api/payments/create", {
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                },
                                body: JSON.stringify({
                                  amount: amount,
                                  currency: "GBP",
                                  provider: "paypal",
                                }),
                              })
                                .then((response) => response.json())
                                .then((data) => data.id);
                            },
                          })
                          .render(".paypal-container");
                      } catch (error) {
                        console.error("Error rendering PayPal button:", error);
                      }
                    }
                  </script>
                </div>
              </div>
            </div>

            <div class="d-flex justify-content-between mt-4">
              <button
                type="button"
                class="btn btn-outline-secondary back-btn"
                data-step="2"
              >
                <i class="fas fa-arrow-left me-2"></i> Back
              </button>
              <button
                type="button"
                class="btn btn-main hover-style-two"
                id="processPaymentBtn"
              >
                Process Payment <i class="fas fa-arrow-right ms-2"></i>
              </button>
            </div>
          </div>

          <!-- Step 4: Confirmation -->
          <div class="step-content" id="step4" style="display: none">
            <div class="text-center py-5">
              <div class="confirmation-icon mb-4">
                <i
                  class="fas fa-check-circle text-success"
                  style="font-size: 80px"
                ></i>
              </div>
              <h3 class="mb-3">Shipment Created Successfully!</h3>
              <p class="mb-4">
                Your shipment has been created. If you provided a valid email
                address, you should receive a confirmation email shortly.
              </p>

              <!-- Email Warning Message (only shown if there was an email error) -->
              <div
                id="emailWarning"
                style="display: none"
                class="alert alert-warning mx-auto mb-4"
                style="max-width: 500px"
              >
                <div class="d-flex align-items-center">
                  <i
                    class="fas fa-envelope me-3 text-warning"
                    style="font-size: 24px"
                  ></i>
                  <div class="text-start">
                    <strong>Email Delivery Notice:</strong>
                    <p class="mb-0">
                      There might be a delay in receiving your confirmation
                      email. Please save your tracking information for
                      reference.
                    </p>
                  </div>
                </div>
              </div>

              <div
                class="shipment-details card mx-auto"
                style="max-width: 500px"
              >
                <div class="card-body">
                  <h5 class="card-title">Shipment Details</h5>
                  <div class="mt-3">
                    <p>
                      <strong>Shipment ID:</strong>
                      <span id="confirmShipmentId"></span>
                    </p>
                    <p>
                      <strong>Tracking Number:</strong>
                      <span
                        id="confirmTrackingId"
                        class="text-main-600 fw-bold"
                      ></span>
                    </p>
                    <p>
                      <strong>Carrier:</strong>
                      <span id="confirmCarrier"></span>
                    </p>
                    <p>
                      <strong>Estimated Delivery:</strong>
                      <span id="confirmDelivery"></span>
                    </p>
                  </div>
                  <div class="d-grid gap-2 mt-4">
                    <a
                      href="/shipment/track"
                      class="btn btn-outline-primary"
                      style="color: #212529"
                    >
                      <i class="fas fa-search me-2"></i> Track Shipment
                    </a>
                    <a
                      href="/create-shipment"
                      class="btn btn-main hover-style-two"
                    >
                      <i class="fas fa-plus me-2"></i> Create Another Shipment
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- Create Shipment Section end -->

<style>
  .step-progress {
    position: relative;
    padding: 0 40px;
  }
  .step-progress::before {
    content: "";
    position: absolute;
    top: 5px;
    left: 0;
    right: 0;
    height: 2px;
    background: #e9ecef;
    z-index: 1;
  }
  .step-progress .progress {
    position: relative;
    z-index: 2;
    background: transparent;
  }
  .step-progress .progress-bar {
    background: var(--color-main-600);
    transition: width 0.3s ease;
  }
  .step-labels {
    position: relative;
    z-index: 3;
    display: flex;
    justify-content: space-between;
    margin-top: 15px;
  }
  .step-label {
    position: relative;
    padding: 8px 16px;
    background: #fff;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 14px;
    color: #6c757d;
    border: 2px solid #e9ecef;
  }
  .step-label:hover {
    border-color: var(--color-main-600);
    color: var(--color-main-600);
  }
  .step-label.active {
    background: var(--color-main-600);
    color: white;
    border-color: var(--color-main-600);
  }
  .step-label.completed {
    background: var(--color-main-600);
    color: white;
    border-color: var(--color-main-600);
  }
  .step-label.completed::after {
    content: "✓";
    margin-left: 5px;
  }
  .step-label.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  .carrier-logo {
    height: 40px;
    object-fit: contain;
  }
  .rate-card {
    transition: all 0.3s ease;
    cursor: pointer;
    border: 2px solid transparent;
    background: #fff;
    border-radius: 12px;
    overflow: hidden;
    position: relative;
  }
  .rate-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }
  .rate-card.selected {
    border-color: var(--color-main-600);
    background-color: rgba(var(--color-main-600-rgb), 0.05);
  }
  .rate-card.selected::before {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 0 40px 40px 0;
    border-color: var(--color-main-600) transparent transparent transparent;
  }
  .rate-card.selected::after {
    content: "✓";
    position: absolute;
    top: 5px;
    right: 10px;
    color: white;
    font-size: 14px;
  }
  .rate-details {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin: 15px 0;
  }
  .rate-details p {
    margin-bottom: 8px;
  }
  .rate-details p:last-child {
    margin-bottom: 0;
    font-size: 1.2em;
    color: var(--color-main-600);
  }
  .select-rate-btn {
    width: 100%;
    padding: 10px;
    border-radius: 8px;
    transition: all 0.3s ease;
  }
  .select-rate-btn:hover {
    background-color: var(--color-main-600);
    color: white;
  }
  .payment-card {
    transition: all 0.3s ease;
    border: 2px solid transparent;
    border-radius: 12px;
    overflow: hidden;
  }
  .payment-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .paymentMethod:checked + .payment-card {
    border-color: var(--color-main-600);
  }
  .loading-animation {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 40px;
  }
  .loading-animation .spinner-border {
    width: 3rem;
    height: 3rem;
  }
  .loading-animation p {
    margin-top: 20px;
    color: #6c757d;
    font-size: 1.1em;
  }
  .rate-card .delivery-info {
    display: flex;
    align-items: center;
    margin-top: 10px;
    color: #6c757d;
    font-size: 0.9em;
  }
  .rate-card .delivery-info i {
    margin-right: 5px;
    color: var(--color-main-600);
  }
  .summary-item {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 8px;
  }
  .summary-item:last-child {
    margin-bottom: 0;
  }
  .summary-item.total {
    background: var(--color-main-600);
    color: white;
    font-size: 1.2em;
  }
  .summary-item.total i {
    color: white;
  }
  .input-group-text {
    background: #f8f9fa;
    border-right: none;
  }
  .input-group .form-control {
    border-left: none;
  }
  .input-group .form-control:focus {
    border-color: #ced4da;
  }
  .input-group:focus-within {
    box-shadow: 0 0 0 0.2rem rgba(var(--color-main-600-rgb), 0.25);
  }
  #paypalPaymentForm .card {
    width: 100%;
    max-width: 100%;
  }

  #paypalPaymentForm .card-body {
    padding: 2rem;
  }

  .paypal-container {
    min-width: 100%;
    display: flex;
    justify-content: center;
  }
  .form-container-6UL254A8EQVRQ,
  .css-1b6cd97,
  .css-178qcrb,
  #form-container-6UL254A8EQVRQ {
    width: 100% !important;
    min-width: 100% !important;
  }

  @media only screen and (min-width: 500px) {
    .paypal-button-container {
      min-width: 500px;
      max-width: 100% !important;
    }
  }

  .paypal-button-container
    .paypal-autoresize-container
    .paypal-button-layout-vertical
    .paypal-button-shape-rect
    .paypal-button-number-single
    .paypal-button-env-production {
    width: 100% !important;
    min-width: 100% !important;
  }

  /* PayPal button container styles */
  .paypal-button-container {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  /* PayPal button styles */
  .paypal-button {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  /* PayPal button wrapper styles */
  .paypal-button-wrapper {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  /* Override PayPal's default styles */
  .paypal-button-container .paypal-button-layout-vertical {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  .paypal-button-container .paypal-button-shape-rect {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  .paypal-button-container .paypal-button-number-single {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }
</style>

<script src="https://js.stripe.com/v3/"></script>
<script>
  // Pass environment variables to client-side
  const STRIPE_PUBLIC_KEY = "<%- process.env.STRIPE_PUBLIC_KEY %>";
  const PAYPAL_HOSTED_BUTTON_ID = "<%- process.env.PAYPAL_HOSTED_BUTTON_ID %>";
  const PAYPAL_CLIENT_ID = "<%- process.env.PAYPAL_CLIENT_ID %>";

  console.log("[Debug] Raw STRIPE_PUBLIC_KEY from EJS:", STRIPE_PUBLIC_KEY);

  document.addEventListener("DOMContentLoaded", function () {
    console.log(
      "[Debug] DOMContentLoaded: STRIPE_PUBLIC_KEY is:",
      STRIPE_PUBLIC_KEY
    );

    let stripe = null; // Declare stripe here to be in wider scope
    let elements;

    const isStripeKeyNotTruthy = !STRIPE_PUBLIC_KEY;
    const isStripeKeyUndefinedString = STRIPE_PUBLIC_KEY === "undefined";
    // To check for the literal EJS tag, we need to construct the string in a way EJS won't process it as a tag.
    const ejsTagLiteral =
      "<" + "%" + "-" + " process.env.STRIPE_PUBLIC_KEY " + "%" + ">";
    const isStripeKeyStillEjsLiteral =
      STRIPE_PUBLIC_KEY.includes(ejsTagLiteral);

    console.log(
      "[Debug] Stripe Key Check - !STRIPE_PUBLIC_KEY:",
      isStripeKeyNotTruthy
    );
    console.log(
      '[Debug] Stripe Key Check - STRIPE_PUBLIC_KEY === "undefined":',
      isStripeKeyUndefinedString
    );
    console.log(
      `[Debug] Stripe Key Check - STRIPE_PUBLIC_KEY.includes("${ejsTagLiteral}"):`,
      isStripeKeyStillEjsLiteral
    );

    if (
      isStripeKeyNotTruthy ||
      isStripeKeyUndefinedString ||
      isStripeKeyStillEjsLiteral
    ) {
      console.error(
        "[Error] Invalid Stripe public key detected. Conditions: ",
        {
          isStripeKeyNotTruthy,
          isStripeKeyUndefinedString,
          isStripeKeyStillEjsLiteral,
          actualValue: STRIPE_PUBLIC_KEY,
        }
      );
      const paymentStatus = document.getElementById("paymentStatus");
      if (paymentStatus) {
        paymentStatus.innerHTML = `
          <div class="alert alert-warning" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            Stripe Payment Configuration Issue. Please contact support. (Debug code: SKE_INIT_FAIL)
          </div>
        `;
      }
    } else {
      try {
        stripe = Stripe(STRIPE_PUBLIC_KEY);
        console.log(
          "[Debug] Stripe initialized successfully. Stripe object:",
          stripe
        );
      } catch (e) {
        console.error(
          "[CRITICAL_ERROR] Stripe(STRIPE_PUBLIC_KEY) constructor FAILED. Key used:",
          STRIPE_PUBLIC_KEY,
          "Error object:",
          e
        );
        stripe = null; // Ensure stripe is null if initialization fails
        const paymentStatus = document.getElementById("paymentStatus");
        if (paymentStatus) {
          paymentStatus.innerHTML = `
            <div class="alert alert-danger" role="alert">
              <i class="fas fa-exclamation-circle me-2"></i>
              Error initializing Stripe. Please contact support. (Debug code: SKE_STRIPE_CTOR_FAIL)
            </div>
          `;
        }
      }
    }

    // Get elements with null checks
    const stepProgressBar = document.getElementById("stepProgressBar");
    const stepLabels = document.querySelectorAll(".step-label");
    const stepContents = document.querySelectorAll(".step-content");
    const shipmentDetailsForm = document.getElementById("shipmentDetailsForm");
    const insuranceRequired = document.getElementById("insuranceRequired");
    const insuranceDetails = document.querySelector(".insurance-details");
    const backButtons = document.querySelectorAll(".back-btn");
    const selectRateBtn = document.getElementById("selectRateBtn");
    const processPaymentBtn = document.getElementById("processPaymentBtn");
    const paymentMethodRadios = document.querySelectorAll(
      'input[name="paymentMethod"]'
    );
    const stripePaymentForm = document.getElementById("stripePaymentForm");
    const paypalPaymentForm = document.getElementById("paypalPaymentForm");

    // Current step
    let currentStep = 1;

    // Selected rate/carrier
    let selectedRate = null;

    // Show insurance fields if insurance is checked
    if (insuranceRequired && insuranceDetails) {
      insuranceRequired.addEventListener("change", function () {
        insuranceDetails.style.display = this.checked ? "block" : "none";
      });
    }

    // Handle step navigation
    function goToStep(step) {
      currentStep = step;

      // Update progress bar
      if (stepProgressBar) {
        const progress = ((step - 1) / 3) * 100;
        stepProgressBar.style.width = `${progress}%`;
        stepProgressBar.setAttribute("aria-valuenow", progress);
      }

      // Update step labels
      if (stepLabels && stepLabels.length) {
        stepLabels.forEach((label, index) => {
          const stepNum = index + 1;
          if (stepNum < step) {
            label.classList.add("completed");
            label.classList.remove("active", "disabled");
          } else if (stepNum === step) {
            label.classList.add("active");
            label.classList.remove("completed", "disabled");
          } else {
            label.classList.add("disabled");
            label.classList.remove("active", "completed");
          }
        });
      }

      // Show current step content, hide others
      if (stepContents && stepContents.length) {
        stepContents.forEach((content, index) => {
          if (index + 1 === step) {
            content.style.display = "block";
          } else {
            content.style.display = "none";
          }
        });
      }
    }

    // Add click handlers to step labels
    if (stepLabels && stepLabels.length) {
      stepLabels.forEach((label) => {
        label.addEventListener("click", function () {
          if (!this.classList.contains("disabled")) {
            const targetStep = parseInt(this.getAttribute("data-step"));
            goToStep(targetStep);
          }
        });
      });
    }

    // Handle form submission (Step 1)
    if (shipmentDetailsForm) {
      shipmentDetailsForm.addEventListener("submit", function (e) {
        e.preventDefault();

        // Show loading animation
        const loadingRates = document.getElementById("loadingRates");
        const shippingRates = document.getElementById("shippingRates");

        if (loadingRates) {
          loadingRates.style.display = "block";
        }

        if (shippingRates) {
          shippingRates.style.display = "none";
        }

        // Move to Step 2
        goToStep(2);

        // Simulate API call to get rates
        setTimeout(function () {
          // Hide loading, show rates
          if (loadingRates) {
            loadingRates.style.display = "none";
          }

          if (shippingRates) {
            shippingRates.style.display = "block";
          }

          // Populate rates
          populateShippingRates();
        }, 2000);
      });
    }

    // Handle selecting a rate
    if (selectRateBtn) {
      selectRateBtn.addEventListener("click", function () {
        if (selectedRate) {
          // Populate summary elements if they exist
          const summaryElements = {
            carrier: document.getElementById("summaryCarrier"),
            service: document.getElementById("summaryService"),
            delivery: document.getElementById("summaryDelivery"),
            baseRate: document.getElementById("summaryBaseRate"),
            additional: document.getElementById("summaryAdditional"),
            total: document.getElementById("summaryTotal"),
            stripeTotal: document.getElementById("stripeTotalPrice"),
            paypalTotal: document.getElementById("paypalTotalPrice"),
          };

          // Update summary elements if they exist
          if (summaryElements.carrier) {
            summaryElements.carrier.textContent = selectedRate.carrier;
          }

          if (summaryElements.service) {
            summaryElements.service.textContent = selectedRate.service;
          }

          if (summaryElements.delivery) {
            summaryElements.delivery.textContent = selectedRate.deliveryDays;
          }

          if (summaryElements.baseRate) {
            summaryElements.baseRate.textContent =
              selectedRate.baseRate.toFixed(2);
          }

          if (summaryElements.additional) {
            summaryElements.additional.textContent =
              selectedRate.additionalFees.toFixed(2);
          }

          if (summaryElements.total) {
            summaryElements.total.textContent =
              selectedRate.totalRate.toFixed(2);
          }

          // Update payment form totals
          if (summaryElements.stripeTotal) {
            summaryElements.stripeTotal.textContent =
              selectedRate.totalRate.toFixed(2);
          }

          if (summaryElements.paypalTotal) {
            summaryElements.paypalTotal.textContent =
              selectedRate.totalRate.toFixed(2);
          }

          // Update PayPal button with new amount
          try {
            if (typeof updatePayPalButton === "function") {
              updatePayPalButton(selectedRate.totalRate);
            } else {
              console.error("updatePayPalButton function not found");
            }
          } catch (error) {
            console.error("Error updating PayPal button:", error);
          }

          // Go to payment step
          goToStep(3);
        }
      });
    }

    // Handle payment method change
    if (
      paymentMethodRadios &&
      paymentMethodRadios.length &&
      stripePaymentForm &&
      paypalPaymentForm
    ) {
      paymentMethodRadios.forEach((radio) => {
        radio.addEventListener("change", function () {
          if (this.value === "stripe") {
            stripePaymentForm.style.display = "block";
            paypalPaymentForm.style.display = "none";
          } else if (this.value === "paypal") {
            stripePaymentForm.style.display = "none";
            paypalPaymentForm.style.display = "block";
          }
        });
      });
    }

    // Handle payment processing
    if (processPaymentBtn) {
      processPaymentBtn.addEventListener("click", async function () {
        const paymentMethodRadio = document.querySelector(
          'input[name="paymentMethod"]:checked'
        );

        if (!paymentMethodRadio) {
          console.error("No payment method selected");
          const paymentStatus = document.getElementById("paymentStatus");
          if (paymentStatus) {
            paymentStatus.innerHTML = `
              <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                Please select a payment method.
              </div>
            `;
          }
          return;
        }

        const paymentMethod = paymentMethodRadio.value;

        try {
          if (paymentMethod === "stripe") {
            console.log(
              "[Debug] Processing Stripe payment. Current stripe object:",
              stripe
            );
            console.log(
              "[Debug] Current STRIPE_PUBLIC_KEY value:",
              STRIPE_PUBLIC_KEY
            );
            // Check if Stripe is properly initialized
            if (!stripe) {
              console.error(
                "[Error] Stripe object is null or undefined at payment processing time."
              );
              throw new Error(
                "Stripe payment is not available. Please try PayPal or contact support. (Debug code: SKE_NULL_AT_PAY)"
              );
            }

            if (
              !selectedRate ||
              typeof selectedRate.id === "undefined" ||
              typeof selectedRate.totalRate === "undefined"
            ) {
              console.error(
                "[Error] selectedRate is not properly defined:",
                selectedRate
              );
              throw new Error(
                "Cannot process payment. Selected rate information is missing. (Debug code: SKE_NO_RATE)"
              );
            }

            // Create payment intent
            const response = await fetch("/api/payments/create", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                shipmentId: selectedRate.id,
                provider: "stripe",
                amount: selectedRate.totalRate,
              }),
            });

            const responseData = await response.json();

            if (!responseData.success) {
              throw new Error(
                responseData.message || "Failed to create payment"
              );
            }

            const { clientSecret } = responseData.data;

            if (!clientSecret) {
              throw new Error("No client secret received from server");
            }

            // Initialize Stripe Elements with client secret
            elements = stripe.elements({
              clientSecret,
              appearance: {
                theme: "stripe",
              },
            });

            const paymentElement = elements.create("payment");
            const stripeEl = document.getElementById("stripe-payment-element");
            if (!stripeEl) {
              throw new Error("Stripe payment element container not found");
            }
            paymentElement.mount(stripeEl);

            // Confirm payment
            const { error } = await stripe.confirmPayment({
              elements,
              confirmParams: {
                return_url: `${window.location.origin}/shipment/confirmation?shipmentId=${selectedRate.id}`,
              },
            });

            if (error) {
              throw new Error(error.message);
            }
          } else if (paymentMethod === "paypal") {
            // PayPal payment is handled by the hosted button
            window.location.href = `https://www.paypal.com/ncp/payment/${PAYPAL_HOSTED_BUTTON_ID}`;
          }
        } catch (error) {
          console.error("Payment error:", error);
          const paymentStatus = document.getElementById("paymentStatus");
          if (paymentStatus) {
            paymentStatus.innerHTML = `
              <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                Payment failed: ${error.message}
              </div>
            `;
          } else {
            alert("Payment failed: " + error.message);
          }
        }
      });
    }

    // Back button handlers
    if (backButtons && backButtons.length) {
      backButtons.forEach((button) => {
        button.addEventListener("click", function () {
          const targetStep = parseInt(this.getAttribute("data-step"));
          goToStep(targetStep);
        });
      });
    }

    // Populate shipping rates
    function populateShippingRates() {
      const ratesContainer = document.getElementById("ratesContainer");
      if (!ratesContainer) {
        console.error("Rates container not found");
        return;
      }

      ratesContainer.innerHTML = "";

      // Sample shipping rates
      const rates = [
        {
          id: "dhl-express",
          carrier: "DHL",
          logo: "/assets/images/carrier/dhl.png",
          service: "Express",
          deliveryDays: "1-2 Business Days",
          deliveryDate: "2023-04-15",
          baseRate: 45.99,
          additionalFees: 5,
          totalRate: 50.99,
        },
        {
          id: "fedex-standard",
          carrier: "FedEx",
          logo: "/assets/images/carrier/fedex.png",
          service: "Standard",
          deliveryDays: "2-3 Business Days",
          deliveryDate: "2023-04-16",
          baseRate: 35.5,
          additionalFees: 3.5,
          totalRate: 39.0,
        },
        {
          id: "ups-express",
          carrier: "UPS",
          logo: "/assets/images/carrier/ups.png",
          service: "Express Saver",
          deliveryDays: "1-3 Business Days",
          deliveryDate: "2023-04-16",
          baseRate: 40.75,
          additionalFees: 4.25,
          totalRate: 45.0,
        },
      ];

      // Create rate cards
      rates.forEach((rate) => {
        const rateCard = document.createElement("div");
        rateCard.className = "col-md-4 mb-4";
        rateCard.innerHTML = `
          <div class="card rate-card" data-rate-id="${rate.id}">
            <div class="card-body">
              <div class="d-flex align-items-center mb-3">
                <img src="${rate.logo}" alt="${
          rate.carrier
        }" class="carrier-logo me-3">
                <div>
                  <h5 class="mb-1">${rate.carrier} ${rate.service}</h5>
                  <div class="delivery-info">
                    <i class="fas fa-truck"></i>
                    <span>${rate.deliveryDays}</span>
                  </div>
                </div>
              </div>
              <div class="rate-details">
                <p class="mb-2"><strong>Base Rate:</strong> £${rate.baseRate.toFixed(
                  2
                )}</p>
                <p class="mb-2"><strong>Additional Fees:</strong> £${rate.additionalFees.toFixed(
                  2
                )}</p>
                <p class="mb-0"><strong>Total:</strong> £${rate.totalRate.toFixed(
                  2
                )}</p>
              </div>
              <div class="mt-3 d-grid">
                <button class="btn btn-outline-primary select-rate-btn">
                  Select Rate
                </button>
              </div>
            </div>
          </div>
        `;
        ratesContainer.appendChild(rateCard);

        // Store rate data for later use
        const cardElement = rateCard.querySelector(".card");
        if (cardElement) {
          cardElement.dataset.rate = JSON.stringify(rate);
        }
      });

      // Add event listeners to rate cards
      const rateCards = document.querySelectorAll(".rate-card");
      if (rateCards && rateCards.length) {
        rateCards.forEach((card) => {
          card.addEventListener("click", function () {
            // Remove selected class from all cards
            document.querySelectorAll(".rate-card").forEach((c) => {
              c.classList.remove("selected");
            });

            // Add selected class to clicked card
            this.classList.add("selected");

            // Enable continue button
            if (selectRateBtn) {
              selectRateBtn.disabled = false;
            }

            // Store selected rate
            if (this.dataset.rate) {
              try {
                selectedRate = JSON.parse(this.dataset.rate);
              } catch (error) {
                console.error("Error parsing rate data:", error);
              }
            }
          });
        });
      }
    }
  });

  // Use Javascript to make this document body's color #212529
  document.body.style.backgroundColor = "#212529";
</script>
