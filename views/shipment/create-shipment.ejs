<!-- Banner start -->
<section class="banner-inner d-flex align-items-center position-relative overflow-hidden z-1">
  <div class="banner-bg position-absolute top-0 tw-start-0 h-100 w-100 bg-img z-n1"
    data-background-image="/assets/images/thumbs/banner-inner-bg1.png"></div>
  <div class="container position-relative tw-pb-21 tw-pt-400-px">
    <div
      class="banner-inner__content max-w-850-px tw-mx-auto position-absolute top-50 tw-start-50 tw--translate-x-50 tw--translate-y-50 w-100 h-100 d-flex flex-column justify-content-center">
      <h1 class="tw-mb-15 text-white text-center">Create Shipment</h1>
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb justify-content-center">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item active" aria-current="page">
            Create Shipment
          </li>
        </ol>
      </nav>
    </div>
  </div>
</section>
<!-- Banner end -->

<!-- Create Shipment Section start -->
<section class="py-100">
  <div class="container">
    <div class="row">
      <div class="col-lg-10 mx-auto">
        <div class="create-shipment-wrapper bg-white p-4 p-md-5 common-shadow-three tw-rounded-xl"
          style="margin-top: 4rem; margin-bottom: 3rem">
          <!-- Step Navigation -->
          <div class="step-navigation mb-5">
            <div class="step-progress">
              <div class="progress" style="height: 10px">
                <div class="progress-bar" role="progressbar" style="width: 0%" id="stepProgressBar" aria-valuenow="0"
                  aria-valuemin="0" aria-valuemax="100"></div>
              </div>
              <div class="step-labels">
                <span class="step-label active" data-step="1">Shipment Details</span>
                <span class="step-label" data-step="2">Compare Rates</span>
                <span class="step-label" data-step="3">Payment</span>
                <span class="step-label" data-step="4">Confirmation</span>
              </div>
            </div>
          </div>

          <!-- Step 1: Shipment Details Form -->
          <div class="step-content" id="step1">
            <h3 class="mb-4">Shipment Details</h3>
            <form id="shipmentDetailsForm" novalidate>
              <!-- Customer Information -->
              <div class="mb-4">
                <h5 class="mb-3"><i class="fas fa-user me-2 text-main-600"></i>Customer Information</h5>
                <div class="row g-3">
                  <div class="col-md-6">
                    <label for="customerName" class="form-label">Full Name <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="customerName" placeholder="Enter your full name"
                      required minlength="2" maxlength="100" />
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                  <div class="col-md-6">
                    <label for="customerEmail" class="form-label">Email Address <span
                        class="text-danger">*</span></label>
                    <input type="email" class="form-control" id="customerEmail" placeholder="your.email@example.com"
                      required />
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                  <div class="col-md-6">
                    <label for="customerPhone" class="form-label">Phone Number <span
                        class="text-danger">*</span></label>
                    <input type="tel" class="form-control" id="customerPhone" placeholder="+44 7123 456789" required
                      pattern="[+]?[0-9\s\-\(\)]{10,20}" />
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                    <small class="form-text text-muted">Include country code (e.g., +44 for UK)</small>
                  </div>
                </div>
              </div>

              <!-- Origin Address -->
              <div class="mb-4">
                <h5 class="mb-3"><i class="fas fa-map-marker-alt me-2 text-main-600"></i>Origin Address (Pick-up
                  Location)</h5>
                <div class="row g-3">
                  <div class="col-md-12">
                    <label for="originAddress" class="form-label">Street Address <span
                        class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="originAddress"
                      placeholder="123 Main Street, Building Name, Unit/Flat Number" required minlength="5"
                      maxlength="200" />
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                  <div class="col-md-4">
                    <label for="originCity" class="form-label">City <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="originCity" placeholder="London" required minlength="2"
                      maxlength="50" />
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                  <div class="col-md-4">
                    <label for="originPostalCode" class="form-label">Postal Code <span
                        class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="originPostalCode" placeholder="SW1A 1AA" required
                      pattern="[A-Za-z0-9\s\-]{3,10}" />
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                  <div class="col-md-4">
                    <label for="originCountry" class="form-label">Country <span class="text-danger">*</span></label>
                    <select class="form-select" id="originCountry" required>
                      <option value="">Select Country</option>
                      <option value="UK" selected>United Kingdom</option>
                      <option value="US">United States</option>
                      <option value="CA">Canada</option>
                      <option value="AU">Australia</option>
                      <option value="FR">France</option>
                      <option value="DE">Germany</option>
                      <option value="IT">Italy</option>
                      <option value="ES">Spain</option>
                      <option value="NL">Netherlands</option>
                      <option value="JP">Japan</option>
                    </select>
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                </div>
              </div>

              <!-- Destination Address -->
              <div class="mb-4">
                <h5 class="mb-3"><i class="fas fa-shipping-fast me-2 text-main-600"></i>Destination Address (Delivery
                  Location)</h5>
                <div class="address-copy-section mb-3">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="copyAddress">
                    <label class="form-check-label" for="copyAddress">
                      <i class="fas fa-copy me-1"></i> Same as origin address
                    </label>
                  </div>
                </div>
                <div class="row g-3" id="destinationFields">
                  <div class="col-md-12">
                    <label for="destAddress" class="form-label">Street Address <span
                        class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="destAddress"
                      placeholder="456 Delivery Street, Building Name, Unit/Flat Number" required minlength="5"
                      maxlength="200" />
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                  <div class="col-md-4">
                    <label for="destCity" class="form-label">City <span class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="destCity" placeholder="Manchester" required
                      minlength="2" maxlength="50" />
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                  <div class="col-md-4">
                    <label for="destPostalCode" class="form-label">Postal Code <span
                        class="text-danger">*</span></label>
                    <input type="text" class="form-control" id="destPostalCode" placeholder="M1 1AA" required
                      pattern="[A-Za-z0-9\s\-]{3,10}" />
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                  <div class="col-md-4">
                    <label for="destCountry" class="form-label">Country <span class="text-danger">*</span></label>
                    <select class="form-select" id="destCountry" required>
                      <option value="">Select Country</option>
                      <option value="UK" selected>United Kingdom</option>
                      <option value="US">United States</option>
                      <option value="CA">Canada</option>
                      <option value="AU">Australia</option>
                      <option value="FR">France</option>
                      <option value="DE">Germany</option>
                      <option value="IT">Italy</option>
                      <option value="ES">Spain</option>
                      <option value="NL">Netherlands</option>
                      <option value="JP">Japan</option>
                    </select>
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                </div>
              </div>

              <!-- Package Details -->
              <div class="mb-4">
                <h5 class="mb-3"><i class="fas fa-box me-2 text-main-600"></i>Package Details</h5>
                <div class="row g-3">
                  <div class="col-md-6">
                    <label for="packageType" class="form-label">Package Type <span class="text-danger">*</span></label>
                    <select class="form-select" id="packageType" required>
                      <option value="">Select Package Type</option>
                      <option value="envelope">📄 Envelope (Documents, up to 2kg)</option>
                      <option value="small_box">📦 Small Box (up to 5kg)</option>
                      <option value="medium_box">📦 Medium Box (up to 15kg)</option>
                      <option value="large_box">📦 Large Box (up to 30kg)</option>
                      <option value="pallet">🏗️ Pallet (over 30kg)</option>
                    </select>
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                  </div>
                  <div class="col-md-6">
                    <label for="weight" class="form-label">Weight (kg) <span class="text-danger">*</span></label>
                    <div class="input-group">
                      <input type="number" class="form-control" id="weight" placeholder="1.5" min="0.1" max="1000"
                        step="0.1" required />
                      <span class="input-group-text">kg</span>
                    </div>
                    <div class="invalid-feedback"></div>
                    <div class="valid-feedback">Looks good!</div>
                    <small class="form-text text-muted">Accurate weight helps calculate shipping costs</small>
                  </div>
                  <div class="col-12">
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" id="provideDimensions">
                      <label class="form-check-label" for="provideDimensions">
                        <i class="fas fa-ruler-combined me-1"></i> I want to provide exact dimensions (optional but
                        recommended for accurate pricing)
                      </label>
                    </div>
                  </div>
                  <div class="row g-3 mt-2" id="dimensionsSection" style="display: none;">
                    <div class="col-12 mb-2">
                      <small class="text-muted"><i class="fas fa-info-circle me-1"></i> Providing dimensions helps us
                        calculate the most accurate shipping cost</small>
                    </div>
                    <div class="col-md-4">
                      <label for="length" class="form-label">Length (cm)</label>
                      <div class="input-group">
                        <input type="number" class="form-control" id="length" placeholder="30" min="1" max="200"
                          step="0.1" />
                        <span class="input-group-text">cm</span>
                      </div>
                      <div class="invalid-feedback"></div>
                    </div>
                    <div class="col-md-4">
                      <label for="width" class="form-label">Width (cm)</label>
                      <div class="input-group">
                        <input type="number" class="form-control" id="width" placeholder="20" min="1" max="200"
                          step="0.1" />
                        <span class="input-group-text">cm</span>
                      </div>
                      <div class="invalid-feedback"></div>
                    </div>
                    <div class="col-md-4">
                      <label for="height" class="form-label">Height (cm)</label>
                      <div class="input-group">
                        <input type="number" class="form-control" id="height" placeholder="15" min="1" max="200"
                          step="0.1" />
                        <span class="input-group-text">cm</span>
                      </div>
                      <div class="invalid-feedback"></div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Additional Options -->
              <div class="mb-4">
                <h5 class="mb-3"><i class="fas fa-shield-alt me-2 text-main-600"></i>Additional Services</h5>
                <div class="row g-3">
                  <div class="col-md-6">
                    <div class="card h-100 service-option">
                      <div class="card-body">
                        <div class="form-check">
                          <input class="form-check-input" type="checkbox" id="isFragile" />
                          <label class="form-check-label" for="isFragile">
                            <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                            <strong>Fragile Handling</strong>
                          </label>
                        </div>
                        <small class="text-muted">Extra care for delicate items (+£5.00)</small>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="card h-100 service-option">
                      <div class="card-body">
                        <div class="form-check">
                          <input class="form-check-input" type="checkbox" id="insuranceRequired" />
                          <label class="form-check-label" for="insuranceRequired">
                            <i class="fas fa-shield-alt text-success me-2"></i>
                            <strong>Insurance Coverage</strong>
                          </label>
                        </div>
                        <small class="text-muted">Protect your valuable items</small>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-12 insurance-details" style="display: none">
                    <div class="card bg-light">
                      <div class="card-body">
                        <label for="declaredValue" class="form-label"><i class="fas fa-pound-sign me-1"></i>Declared
                          Value (£) <span class="text-danger">*</span></label>
                        <div class="input-group">
                          <span class="input-group-text">£</span>
                          <input type="number" class="form-control" id="declaredValue" placeholder="100.00" min="1"
                            max="10000" step="0.01" />
                        </div>
                        <div class="invalid-feedback"></div>
                        <small class="form-text text-muted">Insurance cost: 2% of declared value (minimum £2.00)</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Form Summary -->
              <div class="form-summary-section mb-4" style="display: none;">
                <div class="card bg-light">
                  <div class="card-body">
                    <h6 class="card-title"><i class="fas fa-clipboard-check me-2"></i>Form Summary</h6>
                    <div id="formSummary"></div>
                  </div>
                </div>
              </div>

              <div class="d-flex justify-content-between align-items-center mt-4">
                <div class="form-progress">
                  <small class="text-muted">
                    <i class="fas fa-info-circle me-1"></i>
                    <span id="validationProgress">Please fill in all required fields</span>
                  </small>
                </div>
                <button type="submit" class="btn btn-main hover-style-two" id="compareRatesBtn" disabled>
                  <i class="fas fa-calculator me-2"></i>Compare Rates <i class="fas fa-arrow-right ms-2"></i>
                </button>
              </div>
            </form>
          </div>

          <!-- Step 2: Compare Rates -->
          <div class="step-content" id="step2" style="display: none">
            <h3 class="mb-4">Compare Shipping Rates</h3>
            <div id="loadingRates" class="text-center py-5">
              <div class="spinner-border text-main-600" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-3">
                Calculating shipping rates from multiple carriers...
              </p>
            </div>
            <div id="shippingRates" class="mt-4" style="display: none">
              <!-- Shipping rates will be displayed here -->
              <div class="row" id="ratesContainer">
                <!-- Rates cards will be inserted here by JavaScript -->
              </div>
            </div>
            <div class="d-flex justify-content-between mt-4">
              <button type="button" class="btn btn-outline-secondary back-btn" data-step="1">
                <i class="fas fa-arrow-left me-2"></i> Back
              </button>
              <button type="button" class="btn btn-main hover-style-two continue-btn" id="selectRateBtn" disabled>
                Continue to Payment <i class="fas fa-arrow-right ms-2"></i>
              </button>
            </div>
          </div>

          <!-- Step 3: Payment -->
          <div class="step-content" id="step3" style="display: none">
            <h3 class="mb-4">Payment | Shipment Summary</h3>

            <!-- Add status message container -->
            <div id="paymentStatus" class="mb-4"></div>

            <div class="selected-rate-summary mb-4">
              <div class="card">
                <div class="card-body">
                  <div class="row">
                    <div class="col-md-6">
                      <div class="summary-item">
                        <i class="fas fa-truck text-main-600 me-2"></i>
                        <span><strong>Carrier:</strong>
                          <span id="summaryCarrier"></span></span>
                      </div>
                      <div class="summary-item">
                        <i class="fas fa-box text-main-600 me-2"></i>
                        <span><strong>Service:</strong>
                          <span id="summaryService"></span></span>
                      </div>
                      <div class="summary-item">
                        <i class="fas fa-calendar-alt text-main-600 me-2"></i>
                        <span><strong>Delivery Estimate:</strong>
                          <span id="summaryDelivery"></span></span>
                      </div>
                    </div>
                    <div class="col-md-6">
                      <div class="summary-item">
                        <i class="fas fa-pound-sign text-main-600 me-2"></i>
                        <span><strong>Base Rate:</strong> £<span id="summaryBaseRate"></span></span>
                      </div>
                      <div class="summary-item">
                        <i class="fas fa-plus-circle text-main-600 me-2"></i>
                        <span><strong>Additional Services:</strong> £<span id="summaryAdditional"></span></span>
                      </div>
                      <div class="summary-item total">
                        <i class="fas fa-receipt text-main-600 me-2"></i>
                        <span><strong>Total:</strong> £<span id="summaryTotal"></span></span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="payment-methods mb-4">
              <h5 class="mb-3">Select Payment Method</h5>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <div class="card payment-card cursor-pointer">
                    <div class="card-body">
                      <div class="form-check" style="display: flex; align-items: center">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentStripe"
                          value="stripe" checked />
                        <label class="form-check-label d-flex align-items-center" for="paymentStripe">
                          <img src="/assets/images/payment/stripe.png" alt="Stripe" height="30" class="me-2"
                            style="width: 70px; margin-left: 10px" />
                          Pay with Stripe
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-md-6 mb-3">
                  <div class="card payment-card cursor-pointer">
                    <div class="card-body">
                      <div class="form-check" style="display: flex; align-items: center">
                        <input class="form-check-input" type="radio" name="paymentMethod" id="paymentPaypal"
                          value="paypal" />
                        <label class="form-check-label d-flex align-items-center" for="paymentPaypal">
                          <img src="/assets/images/payment/paypal.png" alt="PayPal" height="30" class="me-2"
                            style="width: 70px; margin-left: 10px" />
                          Pay with PayPal
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div id="stripePaymentForm">
              <div class="card">
                <div class="card-body">
                  <div class="total-price-display mb-4">
                    <h4 class="text-center">
                      Total Amount: £<span id="stripeTotalPrice">0.00</span>
                    </h4>
                  </div>
                  <div id="stripe-payment-element"></div>
                </div>
              </div>
            </div>

            <div id="paypalPaymentForm" style="display: none">
              <div class="card">
                <div class="card-body text-center">
                  <div class="total-price-display mb-4">
                    <h4 class="text-center">
                      Total Amount: £<span id="paypalTotalPrice">0.00</span>
                    </h4>
                  </div>
                  <script
                    src="https://www.paypal.com/sdk/js?client-id=<%- process.env.PAYPAL_CLIENT_ID %>&amp;components=hosted-buttons&amp;disable-funding=venmo&amp;currency=GBP"></script>
                  <div class="paypal-container w-100"></div>
                  <script>
                    // Define updatePayPalButton with error handling
                    function updatePayPalButton(amount) {
                      // Check if paypal is available
                      if (typeof paypal === "undefined") {
                        console.error("PayPal SDK not loaded yet");
                        return;
                      }

                      try {
                        paypal
                          .HostedButtons({
                            hostedButtonId:
                              "<%- process.env.PAYPAL_HOSTED_BUTTON_ID %>",
                            style: {
                              layout: "vertical",
                              color: "blue",
                              shape: "rect",
                              label: "pay",
                            },
                            createOrder: function () {
                              return fetch("/api/payments/create", {
                                method: "POST",
                                headers: {
                                  "Content-Type": "application/json",
                                },
                                body: JSON.stringify({
                                  amount: amount,
                                  currency: "GBP",
                                  provider: "paypal",
                                }),
                              })
                                .then((response) => response.json())
                                .then((data) => data.id);
                            },
                          })
                          .render(".paypal-container");
                      } catch (error) {
                        console.error("Error rendering PayPal button:", error);
                      }
                    }
                  </script>
                </div>
              </div>
            </div>

            <div class="d-flex justify-content-between mt-4">
              <button type="button" class="btn btn-outline-secondary back-btn" data-step="2">
                <i class="fas fa-arrow-left me-2"></i> Back
              </button>
              <button type="button" class="btn btn-main hover-style-two" id="processPaymentBtn">
                Process Payment <i class="fas fa-arrow-right ms-2"></i>
              </button>
            </div>
          </div>

          <!-- Step 4: Confirmation -->
          <div class="step-content" id="step4" style="display: none">
            <div class="text-center py-5">
              <div class="confirmation-icon mb-4">
                <i class="fas fa-check-circle text-success" style="font-size: 80px"></i>
              </div>
              <h3 class="mb-3">Shipment Created Successfully!</h3>
              <p class="mb-4">
                Your shipment has been created. If you provided a valid email
                address, you should receive a confirmation email shortly.
              </p>

              <!-- Email Warning Message (only shown if there was an email error) -->
              <div id="emailWarning" style="display: none" class="alert alert-warning mx-auto mb-4"
                style="max-width: 500px">
                <div class="d-flex align-items-center">
                  <i class="fas fa-envelope me-3 text-warning" style="font-size: 24px"></i>
                  <div class="text-start">
                    <strong>Email Delivery Notice:</strong>
                    <p class="mb-0">
                      There might be a delay in receiving your confirmation
                      email. Please save your tracking information for
                      reference.
                    </p>
                  </div>
                </div>
              </div>

              <div class="shipment-details card mx-auto" style="max-width: 500px">
                <div class="card-body">
                  <h5 class="card-title">Shipment Details</h5>
                  <div class="mt-3">
                    <p>
                      <strong>Shipment ID:</strong>
                      <span id="confirmShipmentId"></span>
                    </p>
                    <p>
                      <strong>Tracking Number:</strong>
                      <span id="confirmTrackingId" class="text-main-600 fw-bold"></span>
                    </p>
                    <p>
                      <strong>Carrier:</strong>
                      <span id="confirmCarrier"></span>
                    </p>
                    <p>
                      <strong>Estimated Delivery:</strong>
                      <span id="confirmDelivery"></span>
                    </p>
                  </div>
                  <div class="d-grid gap-2 mt-4">
                    <a href="/shipment/track" class="btn btn-outline-primary" style="color: #212529">
                      <i class="fas fa-search me-2"></i> Track Shipment
                    </a>
                    <a href="/create-shipment" class="btn btn-main hover-style-two">
                      <i class="fas fa-plus me-2"></i> Create Another Shipment
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- Create Shipment Section end -->

<style>
  .step-progress {
    position: relative;
    padding: 0 40px;
  }

  .step-progress::before {
    content: "";
    position: absolute;
    top: 5px;
    left: 0;
    right: 0;
    height: 2px;
    background: #e9ecef;
    z-index: 1;
  }

  .step-progress .progress {
    position: relative;
    z-index: 2;
    background: transparent;
  }

  .step-progress .progress-bar {
    background: var(--color-main-600);
    transition: width 0.3s ease;
  }

  .step-labels {
    position: relative;
    z-index: 3;
    display: flex;
    justify-content: space-between;
    margin-top: 15px;
  }

  .step-label {
    position: relative;
    padding: 8px 16px;
    background: #fff;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 14px;
    color: #6c757d;
    border: 2px solid #e9ecef;
  }

  .step-label:hover {
    border-color: var(--color-main-600);
    color: var(--color-main-600);
  }

  .step-label.active {
    background: var(--color-main-600);
    color: white;
    border-color: var(--color-main-600);
  }

  .step-label.completed {
    background: var(--color-main-600);
    color: white;
    border-color: var(--color-main-600);
  }

  .step-label.completed::after {
    content: "✓";
    margin-left: 5px;
  }

  .step-label.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .carrier-logo {
    height: 40px;
    object-fit: contain;
  }

  .rate-card {
    transition: all 0.3s ease;
    cursor: pointer;
    border: 2px solid transparent;
    background: #fff;
    border-radius: 12px;
    overflow: hidden;
    position: relative;
  }

  .rate-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }

  .rate-card.selected {
    border-color: var(--color-main-600);
    background-color: rgba(var(--color-main-600-rgb), 0.05);
  }

  .rate-card.selected::before {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 0 40px 40px 0;
    border-color: var(--color-main-600) transparent transparent transparent;
  }

  .rate-card.selected::after {
    content: "✓";
    position: absolute;
    top: 5px;
    right: 10px;
    color: white;
    font-size: 14px;
  }

  .rate-details {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin: 15px 0;
  }

  .rate-details p {
    margin-bottom: 8px;
  }

  .rate-details p:last-child {
    margin-bottom: 0;
    font-size: 1.2em;
    color: var(--color-main-600);
  }

  .select-rate-btn {
    width: 100%;
    padding: 10px;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .select-rate-btn:hover {
    background-color: var(--color-main-600);
    color: white;
  }

  .payment-card {
    transition: all 0.3s ease;
    border: 2px solid transparent;
    border-radius: 12px;
    overflow: hidden;
  }

  .payment-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }

  .cursor-pointer {
    cursor: pointer;
  }

  .paymentMethod:checked+.payment-card {
    border-color: var(--color-main-600);
  }

  .loading-animation {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 40px;
  }

  .loading-animation .spinner-border {
    width: 3rem;
    height: 3rem;
  }

  .loading-animation p {
    margin-top: 20px;
    color: #6c757d;
    font-size: 1.1em;
  }

  .rate-card .delivery-info {
    display: flex;
    align-items: center;
    margin-top: 10px;
    color: #6c757d;
    font-size: 0.9em;
  }

  .rate-card .delivery-info i {
    margin-right: 5px;
    color: var(--color-main-600);
  }

  .summary-item {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 8px;
  }

  .summary-item:last-child {
    margin-bottom: 0;
  }

  .summary-item.total {
    background: var(--color-main-600);
    color: white;
    font-size: 1.2em;
  }

  .summary-item.total i {
    color: white;
  }

  .input-group-text {
    background: #f8f9fa;
    border-right: none;
  }

  .input-group .form-control {
    border-left: none;
  }

  .input-group .form-control:focus {
    border-color: #ced4da;
  }

  .input-group:focus-within {
    box-shadow: 0 0 0 0.2rem rgba(var(--color-main-600-rgb), 0.25);
  }

  #paypalPaymentForm .card {
    width: 100%;
    max-width: 100%;
  }

  #paypalPaymentForm .card-body {
    padding: 2rem;
  }

  .paypal-container {
    min-width: 100%;
    display: flex;
    justify-content: center;
  }

  .form-container-6UL254A8EQVRQ,
  .css-1b6cd97,
  .css-178qcrb,
  #form-container-6UL254A8EQVRQ {
    width: 100% !important;
    min-width: 100% !important;
  }

  @media only screen and (min-width: 500px) {
    .paypal-button-container {
      min-width: 500px;
      max-width: 100% !important;
    }
  }

  .paypal-button-container .paypal-autoresize-container .paypal-button-layout-vertical .paypal-button-shape-rect .paypal-button-number-single .paypal-button-env-production {
    width: 100% !important;
    min-width: 100% !important;
  }

  /* PayPal button container styles */
  .paypal-button-container {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  /* PayPal button styles */
  .paypal-button {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  /* PayPal button wrapper styles */
  .paypal-button-wrapper {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  /* Override PayPal's default styles */
  .paypal-button-container .paypal-button-layout-vertical {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  .paypal-button-container .paypal-button-shape-rect {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  .paypal-button-container .paypal-button-number-single {
    width: 100% !important;
    min-width: 100% !important;
    max-width: 100% !important;
  }

  .service-option {
    transition: all 0.3s ease;
    border: 2px solid transparent;
    border-radius: 12px;
    overflow: hidden;
  }

  .service-option:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .service-option.selected {
    border-color: var(--color-main-600);
    background-color: rgba(var(--color-main-600-rgb), 0.05);
  }

  .form-control.is-valid {
    border-color: #28a745;
  }

  .form-control.is-invalid {
    border-color: #dc3545;
  }

  .form-select.is-valid {
    border-color: #28a745;
  }

  .form-select.is-invalid {
    border-color: #dc3545;
  }

  .validation-icon {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    z-index: 5;
  }

  .input-group .validation-icon {
    right: 45px;
  }

  .form-floating .validation-icon {
    right: 15px;
  }

  .progress-indicator {
    height: 4px;
    background: #e9ecef;
    border-radius: 2px;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .progress-indicator .progress-bar {
    height: 100%;
    background: linear-gradient(90deg, var(--color-main-600), #28a745);
    transition: width 0.3s ease;
  }

  .field-group {
    position: relative;
  }

  .tooltip-custom {
    position: absolute;
    background: #333;
    color: white;
    padding: 5px 10px;
    border-radius: 4px;
    font-size: 12px;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s;
    pointer-events: none;
  }

  .tooltip-custom.show {
    opacity: 1;
  }

  /* Animation for button pulse effect */
  @keyframes pulse {
    0% {
      transform: scale(1);
    }

    50% {
      transform: scale(1.05);
    }

    100% {
      transform: scale(1);
    }
  }

  .pulse {
    animation: pulse 2s infinite;
  }

  /* Smooth transitions for form elements */
  .form-control,
  .form-select {
    transition: all 0.3s ease;
  }

  .form-control:focus,
  .form-select:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  /* Loading state for buttons */
  .btn.loading {
    position: relative;
    color: transparent !important;
  }

  .btn.loading::after {
    content: "";
    position: absolute;
    width: 16px;
    height: 16px;
    top: 50%;
    left: 50%;
    margin-left: -8px;
    margin-top: -8px;
    border: 2px solid #ffffff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Enhanced notification styles */
  .notification-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    max-width: 400px;
  }

  .notification-slide-in {
    animation: slideInRight 0.3s ease-out;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }

    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  .cursor-pointer {
    cursor: pointer;
  }

  .paymentMethod:checked+.payment-card {
    border-color: var(--color-main-600);
  }
</style>

<script src="https://js.stripe.com/v3/"></script>
<script>
  // Pass environment variables to client-side
  const STRIPE_PUBLIC_KEY = "<%= process.env.STRIPE_PUBLIC_KEY %>";
  const PAYPAL_HOSTED_BUTTON_ID = "<%= process.env.PAYPAL_HOSTED_BUTTON_ID %>";
  const PAYPAL_CLIENT_ID = "<%= process.env.PAYPAL_CLIENT_ID %>";

  document.addEventListener("DOMContentLoaded", function () {
    console.log('🚀 [DEBUG] DOM Content Loaded - Initializing create shipment page');
    let stripe = null;
    let elements = null;

    // Initialize Stripe only if we have a valid public key
    if (
      STRIPE_PUBLIC_KEY &&
      STRIPE_PUBLIC_KEY !== "undefined" &&
      !STRIPE_PUBLIC_KEY.includes("process.env")
    ) {
      try {
        stripe = Stripe(STRIPE_PUBLIC_KEY);
        console.log("[Debug] Stripe initialized successfully");
      } catch (error) {
        console.error("[Error] Failed to initialize Stripe:", error);
        const paymentStatus = document.getElementById("paymentStatus");
        if (paymentStatus) {
          paymentStatus.innerHTML = `
            <div class="alert alert-danger" role="alert">
              <i class="fas fa-exclamation-circle me-2"></i>
              Payment processing is currently unavailable. Please try again later or contact support.
            </div>
          `;
        }
      }
    } else {
      console.error("[Error] Invalid Stripe public key configuration");
      const paymentStatus = document.getElementById("paymentStatus");
      if (paymentStatus) {
        paymentStatus.innerHTML = `
          <div class="alert alert-warning" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            Payment processing is not configured. Please contact support.
          </div>
        `;
      }
    }

    // Get elements with null checks
    const stepProgressBar = document.getElementById("stepProgressBar");
    const stepLabels = document.querySelectorAll(".step-label");
    const stepContents = document.querySelectorAll(".step-content");
    const shipmentDetailsForm = document.getElementById("shipmentDetailsForm");
    const insuranceRequired = document.getElementById("insuranceRequired");
    const insuranceDetails = document.querySelector(".insurance-details");
    const backButtons = document.querySelectorAll(".back-btn");
    const selectRateBtn = document.getElementById("selectRateBtn");
    const processPaymentBtn = document.getElementById("processPaymentBtn");
    const paymentMethodRadios = document.querySelectorAll(
      'input[name="paymentMethod"]'
    );
    const stripePaymentForm = document.getElementById("stripePaymentForm");
    const paypalPaymentForm = document.getElementById("paypalPaymentForm");

    console.log('🔍 [DEBUG] Elements found:', {
      stepProgressBar: !!stepProgressBar,
      stepLabels: stepLabels.length,
      stepContents: stepContents.length,
      shipmentDetailsForm: !!shipmentDetailsForm,
      insuranceRequired: !!insuranceRequired,
      insuranceDetails: !!insuranceDetails,
      backButtons: backButtons.length,
      selectRateBtn: !!selectRateBtn,
      processPaymentBtn: !!processPaymentBtn,
      paymentMethodRadios: paymentMethodRadios.length,
      stripePaymentForm: !!stripePaymentForm,
      paypalPaymentForm: !!paypalPaymentForm
    });

    // Current step
    let currentStep = 1;

    // Selected rate/carrier
    let selectedRate = null;

    // Form validation state
    let formValidation = {
      customerName: false,
      customerEmail: false,
      customerPhone: false,
      originAddress: false,
      originCity: false,
      originPostalCode: false,
      originCountry: false,
      destAddress: false,
      destCity: false,
      destPostalCode: false,
      destCountry: false,
      packageType: false,
      weight: false
    };

    // Validation rules
    const validationRules = {
      customerName: {
        required: true,
        minLength: 2,
        maxLength: 100,
        pattern: /^[a-zA-Z\s\-\']{2,100}$/,
        message: 'Please enter a valid full name (2-100 characters, letters only)'
      },
      customerEmail: {
        required: true,
        pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
        message: 'Please enter a valid email address'
      },
      customerPhone: {
        required: true,
        pattern: /^[+]?[0-9\s\-\(\)]{10,20}$/,
        message: 'Please enter a valid phone number (10-20 digits)'
      },
      originAddress: {
        required: true,
        minLength: 5,
        maxLength: 200,
        message: 'Please enter a valid street address (5-200 characters)'
      },
      originCity: {
        required: true,
        minLength: 2,
        maxLength: 50,
        pattern: /^[a-zA-Z\s\-\']{2,50}$/,
        message: 'Please enter a valid city name (2-50 characters, letters only)'
      },
      originPostalCode: {
        required: true,
        pattern: /^[A-Za-z0-9\s\-]{3,10}$/,
        message: 'Please enter a valid postal code'
      },
      destAddress: {
        required: true,
        minLength: 5,
        maxLength: 200,
        message: 'Please enter a valid street address (5-200 characters)'
      },
      destCity: {
        required: true,
        minLength: 2,
        maxLength: 50,
        pattern: /^[a-zA-Z\s\-\']{2,50}$/,
        message: 'Please enter a valid city name (2-50 characters, letters only)'
      },
      destPostalCode: {
        required: true,
        pattern: /^[A-Za-z0-9\s\-]{3,10}$/,
        message: 'Please enter a valid postal code'
      },
      originCountry: {
        required: true,
        message: 'Please select origin country'
      },
      destCountry: {
        required: true,
        message: 'Please select destination country'
      },
      packageType: {
        required: true,
        message: 'Please select a package type'
      },
      weight: {
        required: true,
        min: 0.1,
        max: 1000,
        message: 'Please enter a valid weight (0.1-1000 kg)'
      }
    };

    // Initialize form validation
    console.log('📋 [DEBUG] Initializing form validation...');
    initializeFormValidation();
    console.log('✅ [DEBUG] Form validation initialized');

    // Show insurance fields if insurance is checked
    if (insuranceRequired && insuranceDetails) {
      console.log('🛡️ [DEBUG] Setting up insurance checkbox handler');
      insuranceRequired.addEventListener("change", function () {
        console.log('🛡️ [DEBUG] Insurance checkbox changed:', this.checked);
        insuranceDetails.style.display = this.checked ? "block" : "none";
        const declaredValueField = document.getElementById('declaredValue');
        if (this.checked) {
          declaredValueField.setAttribute('required', 'required');
          formValidation.declaredValue = false;
          validationRules.declaredValue = {
            required: true,
            min: 1,
            max: 10000,
            message: 'Please enter a valid declared value (£1-£10,000)'
          };
          
          // Add event listeners to the declared value field
          declaredValueField.addEventListener('input', () => {
            console.log('💰 [DEBUG] Declared value input event');
            validateField('declaredValue');
          });
          declaredValueField.addEventListener('blur', () => {
            console.log('💰 [DEBUG] Declared value blur event');
            validateField('declaredValue');
          });
          declaredValueField.addEventListener('change', () => {
            console.log('💰 [DEBUG] Declared value change event');
            validateField('declaredValue');
          });
          
          console.log('🛡️ [DEBUG] Insurance enabled, declared value field is now required');
        } else {
          declaredValueField.removeAttribute('required');
          delete formValidation.declaredValue;
          delete validationRules.declaredValue;
          declaredValueField.classList.remove('is-valid', 'is-invalid');
          console.log('🛡️ [DEBUG] Insurance disabled, declared value field removed from validation');
        }
        updateFormProgress();
      });
    }

    // Handle dimensions section toggle
    const provideDimensionsCheckbox = document.getElementById('provideDimensions');
    const dimensionsSection = document.getElementById('dimensionsSection');
    if (provideDimensionsCheckbox && dimensionsSection) {
      console.log('📐 [DEBUG] Setting up dimensions checkbox handler');
      provideDimensionsCheckbox.addEventListener('change', function () {
        console.log('📐 [DEBUG] Dimensions checkbox changed:', this.checked);
        dimensionsSection.style.display = this.checked ? 'block' : 'none';
      });
    }

    // Handle address copy functionality
    const copyAddressCheckbox = document.getElementById('copyAddress');
    const destinationFields = document.getElementById('destinationFields');
    
    if (copyAddressCheckbox && destinationFields) {
      console.log('📋 [DEBUG] Setting up address copy checkbox handler');
      copyAddressCheckbox.addEventListener('change', function() {
        console.log('📋 [DEBUG] Address copy checkbox changed:', this.checked);
        if (this.checked) {
          // Copy origin address to destination
          document.getElementById('destAddress').value = document.getElementById('originAddress').value;
          document.getElementById('destCity').value = document.getElementById('originCity').value;
          document.getElementById('destPostalCode').value = document.getElementById('originPostalCode').value;
          document.getElementById('destCountry').value = document.getElementById('originCountry').value;
          
          // Hide destination fields
          destinationFields.style.display = 'none';
          
          // Validate copied fields
          validateField('destAddress');
          validateField('destCity');
          validateField('destPostalCode');
          validateField('destCountry');
          console.log('📋 [DEBUG] Address copied and validated');
        } else {
          // Show destination fields
          destinationFields.style.display = 'block';
          
          // Clear destination fields
          document.getElementById('destAddress').value = '';
          document.getElementById('destCity').value = '';
          document.getElementById('destPostalCode').value = '';
          document.getElementById('destCountry').value = '';
          
          // Reset validation
          ['destAddress', 'destCity', 'destPostalCode', 'destCountry'].forEach(field => {
            const element = document.getElementById(field);
            element.classList.remove('is-valid', 'is-invalid');
            formValidation[field] = false;
          });
          console.log('📋 [DEBUG] Address fields cleared and shown');
        }
        updateFormProgress();
      });
    }

    // Handle step navigation
    function goToStep(step) {
      console.log(`🔄 [DEBUG] Navigating to step ${step}`);
      currentStep = step;

      // Update progress bar
      const progressPercentage = ((step - 1) / 3) * 100;
      if (stepProgressBar) {
        stepProgressBar.style.width = progressPercentage + "%";
        stepProgressBar.setAttribute("aria-valuenow", progressPercentage);
        console.log(`📊 [DEBUG] Progress bar updated to ${progressPercentage}%`);
      }

      // Update step labels
      stepLabels.forEach((label, index) => {
        const labelStep = index + 1;
        if (labelStep < step) {
          label.classList.add("completed");
          label.classList.remove("active");
        } else if (labelStep === step) {
          label.classList.add("active");
          label.classList.remove("completed");
        } else {
          label.classList.remove("active", "completed");
        }
      });

      // Show/hide step content
      stepContents.forEach((content, index) => {
        const contentStep = index + 1;
        if (contentStep === step) {
          content.style.display = "block";
          console.log(`👁️ [DEBUG] Showing step ${contentStep} content`);
        } else {
          content.style.display = "none";
        }
      });
      
      console.log(`✅ [DEBUG] Successfully navigated to step ${step}`);
    }

    // Add click handlers to step labels
    if (stepLabels && stepLabels.length) {
      console.log(`🎯 [DEBUG] Adding click handlers to ${stepLabels.length} step labels`);
      stepLabels.forEach((label, index) => {
        label.addEventListener("click", function () {
          console.log(`🖱️ [DEBUG] Step label ${index + 1} clicked`);
          if (!this.classList.contains("disabled")) {
            const targetStep = parseInt(this.getAttribute("data-step"));
            console.log(`🎯 [DEBUG] Navigating to step ${targetStep} from label click`);
            goToStep(targetStep);
          } else {
            console.log(`⚠️ [DEBUG] Step label ${index + 1} is disabled`);
          }
        });
      });
    } else {
      console.warn('⚠️ [DEBUG] No step labels found for click handlers');
    }

    // Handle form submission (Step 1)
    if (shipmentDetailsForm) {
      console.log('📝 [DEBUG] Setting up form submission handler');
      shipmentDetailsForm.addEventListener("submit", function (e) {
        e.preventDefault();
        console.log('🚀 [DEBUG] Form submitted - Step 1');

        // Validate all fields before submission
        let isFormValid = true;
        Object.keys(validationRules).forEach(fieldName => {
          if (!validateField(fieldName)) {
            isFormValid = false;
          }
        });

        console.log('✅ [DEBUG] Form validation result:', isFormValid);

        if (!isFormValid) {
          // Show error message
          showNotification('Please correct the errors in the form before proceeding.', 'error');
          // Focus on first invalid field
          const firstInvalidField = document.querySelector('.form-control.is-invalid, .form-select.is-invalid');
          if (firstInvalidField) {
            firstInvalidField.focus();
            firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
          return;
        }

        // Show success message
        showNotification('Form validated successfully! Calculating shipping rates...', 'success');

        // Show loading animation
        const loadingRates = document.getElementById("loadingRates");
        const shippingRates = document.getElementById("shippingRates");

        if (loadingRates) {
          loadingRates.style.display = "block";
        }

        if (shippingRates) {
          shippingRates.style.display = "none";
        }

        // Move to Step 2
        goToStep(2);

        // Calculate real-time DHL API rates
        calculateRealTimeRates();
      });
    }

    // Handle selecting a rate
    if (selectRateBtn) {
      console.log('🎯 [DEBUG] Setting up rate selection button handler');
      selectRateBtn.addEventListener("click", function () {
        console.log('🖱️ [DEBUG] Select rate button clicked');
        if (selectedRate) {
          console.log('📦 [DEBUG] Selected rate:', selectedRate);
          
          // Populate summary elements if they exist
          const summaryElements = {
            summaryOrigin: document.getElementById('summaryOrigin'),
            summaryDestination: document.getElementById('summaryDestination'),
            summaryPackageType: document.getElementById('summaryPackageType'),
            summaryWeight: document.getElementById('summaryWeight'),
            summaryCarrier: document.getElementById('summaryCarrier'),
            summaryService: document.getElementById('summaryService'),
            summaryPrice: document.getElementById('summaryPrice'),
            summaryDeliveryTime: document.getElementById('summaryDeliveryTime'),
            stripeTotalPrice: document.getElementById('stripeTotalPrice'),
            paypalTotalPrice: document.getElementById('paypalTotalPrice')
          };

          console.log('📋 [DEBUG] Summary elements found:', Object.keys(summaryElements).filter(key => summaryElements[key]));

          // Populate summary with form data and selected rate
          const formData = new FormData(shipmentDetailsForm);
          if (summaryElements.summaryOrigin) {
            summaryElements.summaryOrigin.textContent = `${formData.get('originAddress')}, ${formData.get('originCity')}, ${formData.get('originPostalCode')}, ${formData.get('originCountry')}`;
          }
          if (summaryElements.summaryDestination) {
            summaryElements.summaryDestination.textContent = `${formData.get('destAddress')}, ${formData.get('destCity')}, ${formData.get('destPostalCode')}, ${formData.get('destCountry')}`;
          }
          if (summaryElements.summaryPackageType) {
            summaryElements.summaryPackageType.textContent = formData.get('packageType');
          }
          if (summaryElements.summaryWeight) {
            summaryElements.summaryWeight.textContent = formData.get('weight') + ' kg';
          }
          if (summaryElements.summaryCarrier) {
            summaryElements.summaryCarrier.textContent = selectedRate.carrier;
          }
          if (summaryElements.summaryService) {
            summaryElements.summaryService.textContent = selectedRate.service;
          }
          if (summaryElements.summaryPrice) {
            summaryElements.summaryPrice.textContent = '£' + selectedRate.price;
          }
          if (summaryElements.summaryDeliveryTime) {
            summaryElements.summaryDeliveryTime.textContent = selectedRate.deliveryTime;
          }
          if (summaryElements.stripeTotalPrice) {
            summaryElements.stripeTotalPrice.textContent = selectedRate.price;
          }
          if (summaryElements.paypalTotalPrice) {
            summaryElements.paypalTotalPrice.textContent = selectedRate.price;
          }

          // Update PayPal button with new amount
          if (typeof updatePayPalButton === 'function') {
            console.log('💳 [DEBUG] Updating PayPal button with amount:', selectedRate.price);
            updatePayPalButton(parseFloat(selectedRate.price));
          }

          // Go to payment step
          console.log('🔄 [DEBUG] Proceeding to payment step');
          goToStep(3);
        } else {
          console.warn('⚠️ [DEBUG] No rate selected when button clicked');
          showNotification('Please select a shipping rate before proceeding.', 'error');
        }
      });
    } else {
      console.warn('⚠️ [DEBUG] Select rate button not found');
    }

    // Handle payment method change
    if (
      paymentMethodRadios &&
      paymentMethodRadios.length &&
      stripePaymentForm &&
      paypalPaymentForm
    ) {
      paymentMethodRadios.forEach((radio) => {
        radio.addEventListener("change", function () {
          if (this.value === "stripe") {
            stripePaymentForm.style.display = "block";
            paypalPaymentForm.style.display = "none";
          } else if (this.value === "paypal") {
            stripePaymentForm.style.display = "none";
            paypalPaymentForm.style.display = "block";
          }
        });
      });
    }

    // Handle payment processing
    if (processPaymentBtn) {
      processPaymentBtn.addEventListener("click", async function () {
        const paymentMethodRadio = document.querySelector(
          'input[name="paymentMethod"]:checked'
        );

        if (!paymentMethodRadio) {
          console.error("No payment method selected");
          const paymentStatus = document.getElementById("paymentStatus");
          if (paymentStatus) {
            paymentStatus.innerHTML = `
              <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                Please select a payment method.
              </div>
            `;
          }
          return;
        }

        const paymentMethod = paymentMethodRadio.value;

        try {
          // First create the shipment
          const shipmentData = {
            customerName: document.getElementById("customerName").value,
            customerEmail: document.getElementById("customerEmail").value,
            customerPhone: document.getElementById("customerPhone").value,
            origin: {
              address: document.getElementById("originAddress").value,
              city: document.getElementById("originCity").value,
              postalCode: document.getElementById("originPostalCode").value,
              country: document.getElementById("originCountry").value,
            },
            destination: {
              address: document.getElementById("destAddress").value,
              city: document.getElementById("destCity").value,
              postalCode: document.getElementById("destPostalCode").value,
              country: document.getElementById("destCountry").value,
            },
            packageType: document.getElementById("packageType").value,
            weight: parseFloat(document.getElementById("weight").value),
            dimensions: {
              length: parseFloat(document.getElementById("length").value),
              width: parseFloat(document.getElementById("width").value),
              height: parseFloat(document.getElementById("height").value),
            },
            fragile: document.getElementById("isFragile").checked,
            insuranceRequired:
              document.getElementById("insuranceRequired").checked,
            carrier: selectedRate.carrier,
            service: selectedRate.service,
            price: selectedRate.totalRate,
          };

          // Create shipment
          const shipmentResponse = await fetch("/api/shipments/create", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(shipmentData),
          });

          const shipmentResult = await shipmentResponse.json();

          if (!shipmentResult.success) {
            throw new Error(
              shipmentResult.message || "Failed to create shipment"
            );
          }

          const shipmentId = shipmentResult.shipment.id;

          if (paymentMethod === "stripe") {
            // Create payment intent
            const response = await fetch("/api/payments/create", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                shipmentId: shipmentId,
                provider: "stripe",
                amount: selectedRate.totalRate,
              }),
            });

            const responseData = await response.json();

            if (!responseData.success) {
              throw new Error(
                responseData.message || "Failed to create payment"
              );
            }

            const { clientSecret } = responseData.data;

            if (!clientSecret) {
              throw new Error("No client secret received from server");
            }

            // Initialize Stripe Elements with client secret
            elements = stripe.elements({
              clientSecret,
              appearance: {
                theme: "stripe",
                variables: {
                  colorPrimary: "#0d6efd",
                  colorBackground: "#ffffff",
                  colorText: "#212529",
                  colorDanger: "#dc3545",
                  fontFamily:
                    "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif",
                  spacingUnit: "4px",
                  borderRadius: "4px",
                },
              },
            });

            // Create and mount the Payment Element
            const paymentElement = elements.create("payment");
            const stripeEl = document.getElementById("stripe-payment-element");
            if (!stripeEl) {
              throw new Error("Stripe payment element container not found");
            }
            paymentElement.mount(stripeEl);

            // Hide the process payment button and show a submit button
            processPaymentBtn.style.display = "none";
            const submitButton = document.createElement("button");
            submitButton.className = "btn btn-main hover-style-two";
            submitButton.innerHTML = 'Pay Now <i class="fas fa-lock ms-2"></i>';
            submitButton.style.width = "100%";
            submitButton.style.marginTop = "20px";
            stripeEl.parentNode.appendChild(submitButton);

            // Handle payment submission
            submitButton.addEventListener("click", async function () {
              try {
                // Show loading state
                submitButton.disabled = true;
                submitButton.innerHTML =
                  '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Processing...';

                // Confirm the payment
                const { error, paymentIntent } = await stripe.confirmPayment({
                  elements,
                  confirmParams: {
                    return_url: `${window.location.origin}/shipment/confirmation?shipmentId=${shipmentId}`,
                    payment_method_data: {
                      billing_details: {
                        name: document.getElementById("customerName")?.value || "Customer",
                        email: document.getElementById("customerEmail")?.value || "customer@example.com",
                      },
                    },
                  },
                });

                if (error) {
                  throw new Error(error.message);
                }

                if (paymentIntent.status === "succeeded") {
                  // Show success message
                  const paymentStatus =
                    document.getElementById("paymentStatus");
                  if (paymentStatus) {
                    paymentStatus.innerHTML = `
                      <div class="alert alert-success" role="alert">
                        <i class="fas fa-check-circle me-2"></i>
                        Payment successful! Redirecting to confirmation page...
                      </div>
                    `;
                  }

                  // Redirect to confirmation page
                  window.location.href = `/shipment/confirmation?shipmentId=${shipmentId}`;
                }
              } catch (error) {
                console.error("Payment error:", error);
                const paymentStatus = document.getElementById("paymentStatus");
                if (paymentStatus) {
                  paymentStatus.innerHTML = `
                    <div class="alert alert-danger" role="alert">
                      <i class="fas fa-exclamation-circle me-2"></i>
                      Payment failed: ${error.message}
                    </div>
                  `;
                }
                // Reset button state
                submitButton.disabled = false;
                submitButton.innerHTML =
                  'Pay Now <i class="fas fa-lock ms-2"></i>';
              }
            });
          } else if (paymentMethod === "paypal") {
            // PayPal payment is handled by the hosted button
            window.location.href = `https://www.paypal.com/ncp/payment/${PAYPAL_HOSTED_BUTTON_ID}`;
          }
        } catch (error) {
          console.error("Payment error:", error);
          const paymentStatus = document.getElementById("paymentStatus");
          if (paymentStatus) {
            paymentStatus.innerHTML = `
              <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                Payment failed: ${error.message}
              </div>
            `;
          } else {
            alert("Payment failed: " + error.message);
          }
          // Reset button state
          processPaymentBtn.disabled = false;
          processPaymentBtn.innerHTML =
            'Process Payment <i class="fas fa-arrow-right ms-2"></i>';
        }
      });
    }

    // Back button handlers
    if (backButtons && backButtons.length) {
      backButtons.forEach((button) => {
        button.addEventListener("click", function () {
          const targetStep = parseInt(this.getAttribute("data-step"));
          goToStep(targetStep);
        });
      });
    }

    // Calculate real-time rates using actual shipment data
    async function calculateRealTimeRates() {
      const loadingRates = document.getElementById("loadingRates");
      const shippingRates = document.getElementById("shippingRates");
      const ratesContainer = document.getElementById("ratesContainer");

      try {
        // Get form data
        const formData = new FormData(shipmentDetailsForm);
        
        // Build query parameters for API call
        const params = new URLSearchParams({
          from: `${formData.get('originAddress')}, ${formData.get('originCity')}, ${formData.get('originPostalCode')}, ${formData.get('originCountry')}`,
          to: `${formData.get('destAddress')}, ${formData.get('destCity')}, ${formData.get('destPostalCode')}, ${formData.get('destCountry')}`,
          weight: formData.get('weight'),
          length: formData.get('length') || '20',
          width: formData.get('width') || '15',
          height: formData.get('height') || '10',
          packageType: formData.get('packageType'),
          declaredValue: formData.get('declaredValue') || '100'
        });

        console.log('📦 [DEBUG] Fetching real-time rates with params:', params.toString());

        // Call the API endpoint
        const response = await fetch(`/api/shipping-rates?${params}`);
        const data = await response.json();

        if (!data.success) {
          throw new Error(data.message || 'Failed to calculate rates');
        }

        // Hide loading, show rates
        if (loadingRates) {
          loadingRates.style.display = "none";
        }
        if (shippingRates) {
          shippingRates.style.display = "block";
        }

        // Display the rates
        displayRealTimeRates(data.rates);

      } catch (error) {
        console.error('💥 [DEBUG] Rate calculation error:', error);
        
        // Hide loading
        if (loadingRates) {
          loadingRates.style.display = "none";
        }
        
        // Show error message
        if (ratesContainer) {
          ratesContainer.innerHTML = `
            <div class="col-12">
              <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Failed to calculate shipping rates. Please try again.
              </div>
            </div>
          `;
        }
        
        if (shippingRates) {
          shippingRates.style.display = "block";
        }
      }
    }

    // Display real-time rates from API
    function displayRealTimeRates(rates) {
      const ratesContainer = document.getElementById("ratesContainer");
      if (!ratesContainer) {
        console.error("Rates container not found");
        return;
      }

      ratesContainer.innerHTML = "";

      if (!rates || rates.length === 0) {
        ratesContainer.innerHTML = `
          <div class="col-12">
            <div class="alert alert-warning">
              <i class="fas fa-info-circle me-2"></i>
              No shipping rates available for this route.
            </div>
          </div>
        `;
        return;
      }

      // Create rate cards
      rates.forEach((rate) => {
        const isAvailable = rate.available === true;
        const isMaintenanceMode = rate.maintenanceMode === true;
        const isDHL = rate.carrier === 'DHL';
        
        const rateCard = document.createElement("div");
        rateCard.className = "col-md-4 mb-4";
        rateCard.innerHTML = `
          <div class="card rate-card ${!isAvailable ? 'disabled' : ''}" data-rate-id="${rate.serviceCode || rate.service}" ${!isAvailable ? 'style="opacity: 0.6; cursor: not-allowed;"' : ''}>
            <div class="card-body">
              <div class="d-flex align-items-center mb-3">
                <div class="carrier-logo me-3" style="background: ${isDHL ? '#dc2626' : isMaintenanceMode ? '#f59e0b' : '#6b7280'}; color: white; padding: 8px 12px; border-radius: 6px; font-weight: bold; font-size: 12px;">
                  ${rate.carrier}
                </div>
                <div>
                  <h5 class="mb-1 d-flex align-items-center gap-2">
                    ${rate.service}
                    ${isDHL && isAvailable ? 
                      '<span class="badge bg-success" style="font-size: 10px;"><i class="fas fa-wifi"></i> LIVE</span>' : ''
                    }
                    ${isMaintenanceMode ? 
                      '<span class="badge bg-warning" style="font-size: 10px;"><i class="fas fa-tools"></i> MAINTENANCE</span>' : ''
                    }
                  </h5>
                  <div class="delivery-info">
                    <i class="fas fa-truck"></i>
                    <span>${rate.deliveryTime}</span>
                  </div>
                  ${isMaintenanceMode ? '<small class="text-warning"><i class="fas fa-exclamation-triangle me-1"></i>' + (rate.message || 'Under development') + '</small>' : ''}
                </div>
              </div>
              
              ${isMaintenanceMode ? 
                `<div class="alert alert-warning py-2 mb-3">
                  <small><i class="fas fa-info-circle me-1"></i>API integration in development</small>
                </div>` : ''
              }
              
              <div class="rate-details">
                ${isAvailable ? 
                  `<p class="mb-0 text-center"><strong style="font-size: 1.2em; color: #10b981;">£${rate.baseRate.toFixed(2)}</strong></p>` :
                  `<p class="mb-0 text-center"><strong style="color: #6b7280;">Service Unavailable</strong></p>`
                }
              </div>
              
              <div class="mt-3">
                ${isAvailable && isDHL ? 
                  `<div class="d-flex flex-wrap gap-1 mb-3">
                    <small class="badge bg-light text-dark">✓ Real-time Tracking</small>
                    <small class="badge bg-light text-dark">✓ Live GPS</small>
                    <small class="badge bg-light text-dark">✓ Insurance</small>
                  </div>` :
                  isMaintenanceMode ?
                  `<div class="d-flex flex-wrap gap-1 mb-3">
                    <small class="badge bg-warning text-dark">⏳ Coming Soon</small>
                    <small class="badge bg-warning text-dark">🔧 In Development</small>
                  </div>` : ''
                }
                
                <div class="d-grid">
                  <button class="btn ${isAvailable ? 'btn-primary' : 'btn-outline-secondary'} select-rate-btn" ${!isAvailable ? 'disabled' : ''}>
                    ${isAvailable ? 'Select Rate' : isMaintenanceMode ? 'Under Development' : 'Unavailable'}
                  </button>
                </div>
              </div>
              </div>
            </div>
          `;
          ratesContainer.appendChild(rateCard);

          // Store rate data for later use
          const cardElement = rateCard.querySelector(".card");
          if (cardElement) {
            cardElement.dataset.rate = JSON.stringify(rate);
          }
        });

        // Add click handlers for rate selection
        ratesContainer.addEventListener("click", function (e) {
          const selectBtn = e.target.closest(".select-rate-btn");
          if (selectBtn && !selectBtn.disabled) {
            const rateCard = selectBtn.closest(".rate-card");
            if (rateCard) {
              // Remove previous selections
              document.querySelectorAll(".rate-card").forEach((card) => {
                card.classList.remove("selected");
              });

              // Select this card
              rateCard.classList.add("selected");

              // Store selected rate data
              const rateData = JSON.parse(rateCard.dataset.rate || "{}");
              selectedRate = {
                id: rateData.serviceCode || rateData.service,
                carrier: rateData.carrier,
                service: rateData.service,
                price: rateData.baseRate.toFixed(2),
                deliveryTime: rateData.deliveryTime,
              };

              console.log("Selected rate:", selectedRate);

              // Enable continue button
              if (selectRateBtn) {
                selectRateBtn.disabled = false;
              }
            }
          }
        });
    };

    // Form validation functions
    function initializeFormValidation() {
      console.log('🔧 [DEBUG] Starting form validation initialization');
      
      // Initialize formValidation object with all fields set to false
      Object.keys(validationRules).forEach(fieldName => {
        formValidation[fieldName] = false;
      });
      
      console.log('📋 [DEBUG] Initial formValidation state:', formValidation);
      
      // Add event listeners to all form fields
      Object.keys(validationRules).forEach(fieldName => {
        const field = document.getElementById(fieldName);
        if (field) {
          console.log(`✅ [DEBUG] Adding listeners to field: ${fieldName}`);
          // Real-time validation on input/change
          field.addEventListener('input', () => {
            console.log(`📝 [DEBUG] Input event on ${fieldName}`);
            validateField(fieldName);
          });
          field.addEventListener('blur', () => {
            console.log(`👁️ [DEBUG] Blur event on ${fieldName}`);
            validateField(fieldName);
          });
          field.addEventListener('change', () => {
            console.log(`🔄 [DEBUG] Change event on ${fieldName}`);
            validateField(fieldName);
          });
          
          // Validate field immediately if it has a value
          if (field.value && field.value.trim() !== '') {
            console.log(`🔍 [DEBUG] Field ${fieldName} has initial value, validating...`);
            validateField(fieldName);
          }
        } else {
          console.warn(`⚠️ [DEBUG] Field not found: ${fieldName}`);
        }
      });

      // Initialize progress tracking
      console.log('📊 [DEBUG] Updating initial form progress');
      updateFormProgress();
    }

    function validateField(fieldName) {
      const field = document.getElementById(fieldName);
      const rule = validationRules[fieldName];

      if (!field || !rule) {
        console.log(`⚠️ [DEBUG] Field or rule not found for: ${fieldName}`);
        return true;
      }

      const value = field.value.trim();
      let isValid = true;
      let errorMessage = '';

      console.log(`🔍 [DEBUG] Validating field: ${fieldName}, value: "${value}"`);

      // Required validation
      if (rule.required && !value) {
        isValid = false;
        errorMessage = `${getFieldLabel(fieldName)} is required`;
      }
      // Length validation
      else if (rule.minLength && value.length < rule.minLength) {
        isValid = false;
        errorMessage = `${getFieldLabel(fieldName)} must be at least ${rule.minLength} characters`;
      }
      else if (rule.maxLength && value.length > rule.maxLength) {
        isValid = false;
        errorMessage = `${getFieldLabel(fieldName)} must be no more than ${rule.maxLength} characters`;
      }
      // Pattern validation
      else if (rule.pattern && !rule.pattern.test(value)) {
        isValid = false;
        errorMessage = rule.message;
      }
      // Number validation
      else if (rule.min && (isNaN(parseFloat(value)) || parseFloat(value) < rule.min)) {
        isValid = false;
        errorMessage = `${getFieldLabel(fieldName)} must be at least ${rule.min}`;
      }
      else if (rule.max && (isNaN(parseFloat(value)) || parseFloat(value) > rule.max)) {
        isValid = false;
        errorMessage = `${getFieldLabel(fieldName)} must be no more than ${rule.max}`;
      }

      console.log(`✅ [DEBUG] Field ${fieldName} validation result: ${isValid ? 'VALID' : 'INVALID'} - ${errorMessage || 'No errors'}`);

      // Special handling for select fields (country dropdowns)
      if ((fieldName === 'originCountry' || fieldName === 'destCountry') && value && value !== '') {
        isValid = true;
        errorMessage = '';
        console.log(`🌍 [DEBUG] Country field ${fieldName} has value: ${value}`);
      }

      // Update field appearance
      const feedbackElement = field.parentNode.querySelector('.invalid-feedback');
      if (isValid) {
        field.classList.remove('is-invalid');
        field.classList.add('is-valid');
        if (feedbackElement) feedbackElement.textContent = '';
      } else {
        field.classList.remove('is-valid');
        field.classList.add('is-invalid');
        if (feedbackElement) feedbackElement.textContent = errorMessage;
      }

      // Update validation state
      formValidation[fieldName] = isValid;
      console.log(`🔄 [DEBUG] Updated formValidation[${fieldName}] = ${isValid}`);
      updateFormProgress();

      return isValid;
    }

    function getFieldLabel(fieldName) {
      const field = document.getElementById(fieldName);
      const label = field ? document.querySelector(`label[for="${fieldName}"]`) : null;
      return label ? label.textContent.replace(' *', '') : fieldName;
    }

    function updateFormProgress() {
      const totalFields = Object.keys(formValidation).length;
      const validFields = Object.values(formValidation).filter(Boolean).length;
      const progress = totalFields > 0 ? (validFields / totalFields) * 100 : 0;

      console.log(`📊 [DEBUG] Form progress: ${validFields}/${totalFields} fields valid (${progress.toFixed(1)}%)`);
      console.log(`📊 [DEBUG] Form validation state:`, formValidation);

      // List invalid fields for debugging
      const invalidFields = Object.keys(formValidation).filter(key => !formValidation[key]);
      console.log(`❌ [DEBUG] Invalid/incomplete fields:`, invalidFields);

      // Update progress text
      const progressElement = document.getElementById('validationProgress');
      const compareButton = document.getElementById('compareRatesBtn');

      if (progressElement) {
        if (progress === 100) {
          progressElement.innerHTML = '<i class="fas fa-check-circle text-success me-1"></i>All fields completed!';
          if (compareButton) {
            compareButton.disabled = false;
            compareButton.classList.add('pulse');
            console.log('✅ [DEBUG] Compare button ENABLED - all fields valid');
          }
        } else {
          progressElement.innerHTML = `<i class="fas fa-info-circle me-1"></i>Progress: ${validFields}/${totalFields} fields completed`;
          if (compareButton) {
            compareButton.disabled = true;
            compareButton.classList.remove('pulse');
            console.log(`⏳ [DEBUG] Compare button DISABLED - ${totalFields - validFields} fields remaining`);
            console.log(`⏳ [DEBUG] Missing fields: ${invalidFields.join(', ')}`);
          }
        }
      }

      // Update form summary if visible
      updateFormSummary();
    }

    function updateFormSummary() {
      const summarySection = document.querySelector('.form-summary-section');
      const summaryContent = document.getElementById('formSummary');

      if (!summarySection || !summaryContent) return;

      const totalFields = Object.keys(formValidation).length;
      const validFields = Object.values(formValidation).filter(Boolean).length;

      if (validFields > totalFields * 0.5) {
        summarySection.style.display = 'block';

        let summaryHTML = '<div class="row g-2">';

        // Customer info
        const customerName = document.getElementById('customerName').value;
        const customerEmail = document.getElementById('customerEmail').value;
        if (customerName && customerEmail) {
          summaryHTML += `<div class="col-md-6"><small><strong>Customer:</strong> ${customerName}</small></div>`;
          summaryHTML += `<div class="col-md-6"><small><strong>Email:</strong> ${customerEmail}</small></div>`;
        }

        // Addresses
        const originCity = document.getElementById('originCity').value;
        const destCity = document.getElementById('destCity').value;
        if (originCity && destCity) {
          summaryHTML += `<div class="col-md-6"><small><strong>From:</strong> ${originCity}</small></div>`;
          summaryHTML += `<div class="col-md-6"><small><strong>To:</strong> ${destCity}</small></div>`;
        }

        // Package details
        const packageType = document.getElementById('packageType').value;
        const weight = document.getElementById('weight').value;
        if (packageType && weight) {
          summaryHTML += `<div class="col-md-6"><small><strong>Package:</strong> ${packageType.replace('_', ' ')}</small></div>`;
          summaryHTML += `<div class="col-md-6"><small><strong>Weight:</strong> ${weight} kg</small></div>`;
        }

        summaryHTML += '</div>';
        summaryContent.innerHTML = summaryHTML;
      } else {
        summarySection.style.display = 'none';
      }
    }

    function showNotification(message, type = 'info') {
      console.log(`📢 [DEBUG] Showing notification: ${type} - ${message}`);
      
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
      notification.style.cssText = `
        top: 20px;
        right: 20px;
        z-index: 9999;
        min-width: 300px;
        max-width: 500px;
      `;
      notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;

      // Add to body
      document.body.appendChild(notification);
      console.log('✅ [DEBUG] Notification added to DOM');

      // Auto remove after 5 seconds
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
          console.log('🗑️ [DEBUG] Notification auto-removed');
        }
      }, 5000);
    }
  });

  // Use Javascript to make this document body's color #212529
  document.body.style.backgroundColor = "#212529";
</script>