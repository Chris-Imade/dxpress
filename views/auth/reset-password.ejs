<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %> - DXpress
    </title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
            color: #1a1f36;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .reset-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 450px;
            padding: 40px;
            position: relative;
            overflow: hidden;
        }

        .reset-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #1b51ff, #667eea, #764ba2);
        }

        .reset-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .logo {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #032330, #053142);
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            color: white;
            font-size: 24px;
            font-weight: bold;
        }

        .reset-title {
            font-size: 28px;
            font-weight: 700;
            color: #1a1f36;
            margin-bottom: 8px;
        }

        .reset-subtitle {
            color: #6b7280;
            font-size: 16px;
            line-height: 1.5;
        }

        .form-group {
            margin-bottom: 24px;
            position: relative;
        }

        .form-group label {
            display: block;
            font-size: 14px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
        }

        .input-wrapper {
            position: relative;
        }

        .form-control {
            width: 100%;
            padding: 14px 16px 14px 45px;
            font-size: 16px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            transition: all 0.3s ease;
            background: #fafafa;
        }

        .form-control:focus {
            border-color: #1b51ff;
            box-shadow: 0 0 0 4px rgba(27, 81, 255, 0.1);
            outline: none;
            background: white;
        }

        .form-control.is-invalid {
            border-color: #ef4444;
            background: #fef2f2;
        }

        .form-control.is-valid {
            border-color: #10b981;
            background: #f0fdf4;
        }

        .input-icon {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af;
            font-size: 16px;
            z-index: 1;
        }

        .password-toggle {
            position: absolute;
            right: 16px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #9ca3af;
            cursor: pointer;
            font-size: 16px;
            padding: 4px;
        }

        .password-toggle:hover {
            color: #1b51ff;
        }

        .error-message {
            color: #ef4444;
            font-size: 12px;
            margin-top: 6px;
            display: none;
        }

        .success-message {
            color: #10b981;
            font-size: 12px;
            margin-top: 6px;
            display: none;
        }

        .btn-primary {
            width: 100%;
            background: linear-gradient(135deg, #032330, #053142);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 16px 24px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(27, 81, 255, 0.3);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-loading {
            display: none;
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        .alert {
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 24px;
            font-size: 14px;
            display: none;
        }

        .alert-danger {
            background: #fef2f2;
            border: 1px solid #fecaca;
            color: #991b1b;
        }

        .alert-success {
            background: #f0fdf4;
            border: 1px solid #bbf7d0;
            color: #166534;
        }

        .reset-footer {
            text-align: center;
            margin-top: 30px;
        }

        .reset-footer a {
            color: #1b51ff;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .reset-footer a:hover {
            color: #0041f0;
            text-decoration: underline;
        }

        .strength-meter {
            height: 4px;
            background: #e5e7eb;
            border-radius: 2px;
            margin-top: 8px;
            overflow: hidden;
        }

        .strength-fill {
            height: 100%;
            width: 0%;
            transition: all 0.3s ease;
            border-radius: 2px;
        }

        .strength-weak {
            background: #ef4444;
        }

        .strength-medium {
            background: #f59e0b;
        }

        .strength-strong {
            background: #10b981;
        }

        @media (max-width: 480px) {
            .reset-container {
                padding: 30px 20px;
                margin: 10px;
            }

            .reset-title {
                font-size: 24px;
            }
        }
    </style>
</head>

<body>
    <div class="reset-container">
        <div class="reset-header">
            <div class="logo">
                <i class="fas fa-shipping-fast"></i>
            </div>
            <h1 class="reset-title">Reset Password</h1>
            <p class="reset-subtitle">
                Enter your new password below
            </p>
        </div>

        <div class="alert alert-danger" id="errorAlert"></div>
        <div class="alert alert-success" id="successAlert"></div>

        <form id="resetForm" action="/auth/reset-password/<%= token %>" method="POST">
            <div class="form-group">
                <label for="password">New Password</label>
                <div class="input-wrapper">
                    <i class="fas fa-lock input-icon"></i>
                    <input type="password" class="form-control" id="password" name="password" required>
                    <button type="button" class="password-toggle" data-target="password">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                <div class="strength-meter">
                    <div class="strength-fill" id="password-strength"></div>
                </div>
                <div class="error-message" id="password-error"></div>
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm New Password</label>
                <div class="input-wrapper">
                    <i class="fas fa-lock input-icon"></i>
                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                    <button type="button" class="password-toggle" data-target="confirmPassword">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                <div class="error-message" id="confirmPassword-error"></div>
                <div class="success-message" id="confirmPassword-success"></div>
            </div>

            <button type="submit" class="btn-primary">
                <span class="btn-text">Reset Password</span>
                <div class="btn-loading">
                    <div class="spinner"></div>
                </div>
            </button>
        </form>

        <div class="reset-footer">
            <p style="margin-bottom: 15px;">
                <a href="/auth">‚Üê Back to Sign In</a>
            </p>
            <p>
                <a href="/">Back to Website</a>
            </p>
        </div>
    </div>

    <script>
        // Password visibility toggle
        document.querySelectorAll('.password-toggle').forEach(btn => {
            btn.addEventListener('click', () => {
                const targetId = btn.dataset.target;
                const input = document.getElementById(targetId);
                const icon = btn.querySelector('i');

                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.replace('fa-eye', 'fa-eye-slash');
                } else {
                    input.type = 'password';
                    icon.classList.replace('fa-eye-slash', 'fa-eye');
                }
            });
        });

        // Password strength meter
        function updatePasswordStrength(password) {
            const strengthMeter = document.getElementById('password-strength');
            let strength = 0;

            if (password.length >= 8) strength += 25;
            if (/[a-z]/.test(password)) strength += 25;
            if (/[A-Z]/.test(password)) strength += 25;
            if (/\d/.test(password)) strength += 25;

            strengthMeter.style.width = strength + '%';
            strengthMeter.className = 'strength-fill';

            if (strength <= 25) strengthMeter.classList.add('strength-weak');
            else if (strength <= 75) strengthMeter.classList.add('strength-medium');
            else strengthMeter.classList.add('strength-strong');
        }

        // Form validation
        function validateField(fieldId) {
            const field = document.getElementById(fieldId);
            const errorElement = document.getElementById(fieldId + '-error');
            const successElement = document.getElementById(fieldId + '-success');

            let isValid = true;
            let errorMessage = '';

            if (fieldId === 'password') {
                if (!field.value) {
                    isValid = false;
                    errorMessage = 'Password is required';
                } else if (field.value.length < 8) {
                    isValid = false;
                    errorMessage = 'Password must be at least 8 characters long';
                } else if (!/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(field.value)) {
                    isValid = false;
                    errorMessage = 'Password must contain uppercase, lowercase, and number';
                }
            } else if (fieldId === 'confirmPassword') {
                const passwordField = document.getElementById('password');
                if (!field.value) {
                    isValid = false;
                    errorMessage = 'Please confirm your password';
                } else if (field.value !== passwordField.value) {
                    isValid = false;
                    errorMessage = 'Passwords do not match';
                }
            }

            // Update field appearance
            field.classList.toggle('is-invalid', !isValid);
            field.classList.toggle('is-valid', isValid && field.value);

            // Show/hide error message
            if (errorElement) {
                errorElement.textContent = errorMessage;
                errorElement.style.display = !isValid ? 'block' : 'none';
            }

            // Show success message for confirm password
            if (successElement && isValid && field.value) {
                successElement.textContent = 'Passwords match';
                successElement.style.display = 'block';
            } else if (successElement) {
                successElement.style.display = 'none';
            }

            return isValid;
        }

        // Real-time validation
        document.getElementById('password').addEventListener('input', function () {
            updatePasswordStrength(this.value);
            validateField('password');
            // Also validate confirm password if it has a value
            const confirmPassword = document.getElementById('confirmPassword');
            if (confirmPassword.value) {
                validateField('confirmPassword');
            }
        });

        document.getElementById('confirmPassword').addEventListener('input', function () {
            validateField('confirmPassword');
        });

        // Alert functions
        function showAlert(message, type = 'danger') {
            const alert = document.getElementById(type === 'success' ? 'successAlert' : 'errorAlert');
            alert.textContent = message;
            alert.style.display = 'block';

            // Auto-hide after 5 seconds
            setTimeout(() => {
                alert.style.display = 'none';
            }, 5000);
        }

        function hideAlert() {
            document.getElementById('errorAlert').style.display = 'none';
            document.getElementById('successAlert').style.display = 'none';
        }

        // Form submission
        document.getElementById('resetForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const form = this;
            const formData = new FormData(form);
            const submitBtn = form.querySelector('.btn-primary');
            const btnText = submitBtn.querySelector('.btn-text');
            const btnLoading = submitBtn.querySelector('.btn-loading');

            // Validate all fields
            const isPasswordValid = validateField('password');
            const isConfirmValid = validateField('confirmPassword');

            if (!isPasswordValid || !isConfirmValid) {
                showAlert('Please correct the errors in the form');
                return;
            }

            // Show loading state
            submitBtn.disabled = true;
            btnText.style.opacity = '0';
            btnLoading.style.display = 'block';
            hideAlert();

            // Submit form
            fetch(form.action, {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert(data.message || 'Password reset successfully!', 'success');
                        form.reset();
                        // Redirect to login after 2 seconds
                        setTimeout(() => {
                            window.location.href = '/auth';
                        }, 2000);
                    } else {
                        showAlert(data.message || 'An error occurred');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Network error. Please try again.');
                })
                .finally(() => {
                    // Reset loading state
                    submitBtn.disabled = false;
                    btnText.style.opacity = '1';
                    btnLoading.style.display = 'none';
                });
        });
    </script>
</body>

</html>