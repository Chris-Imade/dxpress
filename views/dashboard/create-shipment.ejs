<!-- Dashboard Shipment Creation -->
<div class="dashboard-card" style="margin-bottom: 24px;">
    <div class="card-header">
        <div class="card-icon">
            <i class="fas fa-plus-circle"></i>
        </div>
        <div>
            <div class="card-title">Create New Shipment</div>
            <div class="card-subtitle">Quick and easy shipment creation for logged-in users</div>
        </div>
        <div style="margin-left: auto;">
            <button class="btn btn-secondary" onclick="loadTemplate()">
                <i class="fas fa-file-import"></i>
                Load Template
            </button>
        </div>
    </div>
</div>

<!-- Shipment Form -->
<form id="shipmentForm" style="display: grid; gap: 24px;">
    <!-- Sender Information -->
    <div class="dashboard-card">
        <div class="card-header">
            <div class="card-icon">
                <i class="fas fa-user"></i>
            </div>
            <div>
                <div class="card-title">Sender Information</div>
                <div class="card-subtitle">Your shipping details</div>
            </div>
            <div style="margin-left: auto;">
                <label class="toggle-switch">
                    <input type="checkbox" id="useProfile" checked onchange="toggleProfileData()">
                    <span class="slider"></span>
                </label>
                <span style="margin-left: 8px; font-size: 14px; color: #6b7280;">Use my profile</span>
            </div>
        </div>
        <div style="margin-top: 20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Full Name *</label>
                <input type="text" id="senderName" value="John Doe" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Company</label>
                <input type="text" id="senderCompany" value="Acme Corporation" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;">
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Phone *</label>
                <input type="tel" id="senderPhone" value="+1 (555) 123-4567" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Email *</label>
                <input type="email" id="senderEmail" value="john@acme.com" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div style="grid-column: 1 / -1;">
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Street Address *</label>
                <input type="text" id="senderAddress" value="123 Business St" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">City *</label>
                <input type="text" id="senderCity" value="New York" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Postal Code *</label>
                <input type="text" id="senderPostalCode" value="10001" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Country *</label>
                <select id="senderCountry" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
                    <option value="United States">United States</option>
                    <option value="United Kingdom" selected>United Kingdom</option>
                    <option value="Germany">Germany</option>
                    <option value="France">France</option>
                    <option value="Italy">Italy</option>
                    <option value="Spain">Spain</option>
                    <option value="Netherlands">Netherlands</option>
                    <option value="Belgium">Belgium</option>
                    <option value="Canada">Canada</option>
                    <option value="Australia">Australia</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Recipient Information -->
    <div class="dashboard-card">
        <div class="card-header">
            <div class="card-icon">
                <i class="fas fa-map-marker-alt"></i>
            </div>
            <div>
                <div class="card-title">Recipient Information</div>
                <div class="card-subtitle">Delivery destination details</div>
            </div>
            <div style="margin-left: auto;">
                <button type="button" class="btn btn-secondary" onclick="loadFromAddressBook()">
                    <i class="fas fa-address-book"></i>
                    Address Book
                </button>
            </div>
        </div>
        <div style="margin-top: 20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Full Name *</label>
                <input type="text" id="recipientName" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Company</label>
                <input type="text" id="recipientCompany" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;">
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Phone *</label>
                <input type="tel" id="recipientPhone" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Email</label>
                <input type="email" id="recipientEmail" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;">
            </div>
            <div style="grid-column: 1 / -1;">
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Street Address *</label>
                <input type="text" id="recipientAddress" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">City *</label>
                <input type="text" id="recipientCity" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Postal Code *</label>
                <input type="text" id="recipientPostalCode" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Country *</label>
                <select id="recipientCountry" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
                    <option value="">Select Country</option>
                    <option value="United States">United States</option>
                    <option value="United Kingdom">United Kingdom</option>
                    <option value="Germany">Germany</option>
                    <option value="France">France</option>
                    <option value="Italy">Italy</option>
                    <option value="Spain">Spain</option>
                    <option value="Netherlands">Netherlands</option>
                    <option value="Belgium">Belgium</option>
                    <option value="Canada">Canada</option>
                    <option value="Australia">Australia</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Package Information -->
    <div class="dashboard-card">
        <div class="card-header">
            <div class="card-icon">
                <i class="fas fa-box"></i>
            </div>
            <div>
                <div class="card-title">Package Information</div>
                <div class="card-subtitle">Package details and dimensions</div>
            </div>
        </div>
        <div style="margin-top: 20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Package Type *</label>
                <select id="packageType" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
                    <option value="">Select package type</option>
                    <option value="envelope">Envelope</option>
                    <option value="box">Box</option>
                    <option value="tube">Tube</option>
                    <option value="pallet">Pallet</option>
                    <option value="custom">Custom</option>
                </select>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Weight (kg) *</label>
                <input type="number" id="packageWeight" min="0.1" step="0.1" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Length (cm) *</label>
                <input type="number" id="packageLength" min="1" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Width (cm) *</label>
                <input type="number" id="packageWidth" min="1" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Height (cm) *</label>
                <input type="number" id="packageHeight" min="1" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;" required>
            </div>
            <div>
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Declared Value ($)</label>
                <input type="number" id="packageValue" min="0" step="0.01" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;">
            </div>
            <div style="grid-column: 1 / -1;">
                <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #374151;">Description *</label>
                <textarea id="packageDescription" rows="3" style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px; resize: vertical;" placeholder="Describe the contents of your package..." required></textarea>
            </div>
        </div>
    </div>

    <!-- Shipping Options -->
    <div class="dashboard-card">
        <div class="card-header">
            <div class="card-icon">
                <i class="fas fa-shipping-fast"></i>
            </div>
            <div>
                <div class="card-title">Shipping Options</div>
                <div class="card-subtitle">Choose your preferred shipping method</div>
            </div>
            <div style="margin-left: auto;">
                <button type="button" class="btn btn-secondary" onclick="calculateRates()">
                    <i class="fas fa-calculator"></i>
                    Get Rates
                </button>
            </div>
        </div>
        <div id="shippingOptions" style="margin-top: 20px;">
            <div style="text-align: center; padding: 40px; color: #6b7280;">
                <i class="fas fa-calculator" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
                <p>Click "Get Rates" to see available shipping options</p>
            </div>
        </div>
    </div>

    <!-- Additional Services -->
    <div class="dashboard-card">
        <div class="card-header">
            <div class="card-icon">
                <i class="fas fa-plus-square"></i>
            </div>
            <div>
                <div class="card-title">Additional Services</div>
                <div class="card-subtitle">Optional add-on services</div>
            </div>
        </div>
        <div style="margin-top: 20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
            <div style="display: flex; align-items: center; gap: 12px; padding: 16px; border: 1px solid #e5e7eb; border-radius: 10px;">
                <input type="checkbox" id="insurance" style="width: 18px; height: 18px;">
                <div>
                    <label for="insurance" style="font-weight: 600; color: #374151; cursor: pointer;">Insurance Coverage</label>
                    <div style="font-size: 12px; color: #6b7280;">Protect your package against loss or damage</div>
                </div>
            </div>
            <div style="display: flex; align-items: center; gap: 12px; padding: 16px; border: 1px solid #e5e7eb; border-radius: 10px;">
                <input type="checkbox" id="signature" style="width: 18px; height: 18px;">
                <div>
                    <label for="signature" style="font-weight: 600; color: #374151; cursor: pointer;">Signature Required</label>
                    <div style="font-size: 12px; color: #6b7280;">Require signature upon delivery</div>
                </div>
            </div>
            <div style="display: flex; align-items: center; gap: 12px; padding: 16px; border: 1px solid #e5e7eb; border-radius: 10px;">
                <input type="checkbox" id="tracking" style="width: 18px; height: 18px;" checked>
                <div>
                    <label for="tracking" style="font-weight: 600; color: #374151; cursor: pointer;">Real-time Tracking</label>
                    <div style="font-size: 12px; color: #6b7280;">Track your package in real-time</div>
                </div>
            </div>
            <div style="display: flex; align-items: center; gap: 12px; padding: 16px; border: 1px solid #e5e7eb; border-radius: 10px;">
                <input type="checkbox" id="notifications" style="width: 18px; height: 18px;" checked>
                <div>
                    <label for="notifications" style="font-weight: 600; color: #374151; cursor: pointer;">SMS/Email Notifications</label>
                    <div style="font-size: 12px; color: #6b7280;">Get updates on delivery status</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div style="display: flex; gap: 16px; justify-content: flex-end; padding: 20px 0;">
        <button type="button" class="btn btn-secondary" onclick="saveDraft()">
            <i class="fas fa-save"></i>
            Save as Draft
        </button>
        <button type="button" class="btn btn-secondary" onclick="previewShipment()">
            <i class="fas fa-eye"></i>
            Preview
        </button>
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-paper-plane"></i>
            Create Shipment
        </button>
    </div>
</form>

<style>
.toggle-switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
}

.toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 24px;
}

.slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .slider {
    background-color: #032330;
}

input:checked + .slider:before {
    transform: translateX(26px);
}

.shipping-option {
    border: 2px solid #e5e7eb;
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 16px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.shipping-option:hover {
    border-color: #032330;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(3, 35, 48, 0.1);
}

.shipping-option.selected {
    border-color: #032330;
    background: #f0f9ff;
}

.shipping-option input[type="radio"] {
    display: none;
}

.carrier-logo {
    width: 60px;
    height: 40px;
    background: #f3f4f6;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    color: #374151;
    font-size: 12px;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Pre-fill from URL parameters if coming from rates page
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('from')) {
        document.getElementById('senderAddress').value = urlParams.get('from');
    }
    if (urlParams.get('to')) {
        document.getElementById('recipientAddress').value = urlParams.get('to');
    }
    if (urlParams.get('weight')) {
        document.getElementById('packageWeight').value = urlParams.get('weight');
    }
    
    // Form submission
    document.getElementById('shipmentForm').addEventListener('submit', function(e) {
        e.preventDefault();
        createShipment();
    });
});

function toggleProfileData() {
    const useProfile = document.getElementById('useProfile').checked;
    const senderFields = ['senderName', 'senderCompany', 'senderPhone', 'senderEmail', 'senderAddress'];
    
    senderFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        field.disabled = useProfile;
        if (useProfile) {
            field.style.background = '#f9fafb';
            field.style.color = '#6b7280';
        } else {
            field.style.background = 'white';
            field.style.color = '#374151';
        }
    });
}

function loadTemplate() {
    // Simulate loading a saved template
    const templates = [
        {
            name: 'Standard Business Package',
            recipientName: 'Jane Smith',
            recipientCompany: 'Tech Solutions Inc',
            recipientPhone: '+1 (555) 987-6543',
            recipientEmail: 'jane@techsol.com',
            recipientAddress: '456 Innovation Dr, San Francisco, CA 94107',
            packageType: 'box',
            packageWeight: '2.5',
            packageLength: '30',
            packageWidth: '20',
            packageHeight: '15',
            packageValue: '500',
            packageDescription: 'Electronic components and documentation'
        }
    ];
    
    const template = templates[0];
    Object.keys(template).forEach(key => {
        const field = document.getElementById(key);
        if (field) {
            field.value = template[key];
        }
    });
    
    showNotification('Template loaded successfully!', 'success');
}

function loadFromAddressBook() {
    // Simulate address book selection
    const addresses = [
        {
            name: 'Sarah Johnson',
            company: 'Global Logistics',
            phone: '+1 (555) 456-7890',
            email: 'sarah@globallog.com',
            address: '789 Commerce St, Chicago, IL 60601'
        },
        {
            name: 'Mike Chen',
            company: 'Retail Express',
            phone: '+1 (555) 321-9876',
            email: 'mike@retailexp.com',
            address: '321 Market Ave, Seattle, WA 98101'
        }
    ];
    
    // For demo, just load the first address
    const address = addresses[0];
    document.getElementById('recipientName').value = address.name;
    document.getElementById('recipientCompany').value = address.company;
    document.getElementById('recipientPhone').value = address.phone;
    document.getElementById('recipientEmail').value = address.email;
    document.getElementById('recipientAddress').value = address.address;
    
    showNotification('Address loaded from address book!', 'success');
}

async function calculateRates() {
    const weight = document.getElementById('packageWeight').value;
    const length = document.getElementById('packageLength').value;
    const width = document.getElementById('packageWidth').value;
    const height = document.getElementById('packageHeight').value;
    const packageType = document.getElementById('packageType').value;
    const packageValue = document.getElementById('packageValue').value;
    // Collect structured address data
    const senderAddress = document.getElementById('senderAddress').value;
    const senderCity = document.getElementById('senderCity').value;
    const senderPostalCode = document.getElementById('senderPostalCode').value;
    const senderCountry = document.getElementById('senderCountry').value;
    
    const recipientAddress = document.getElementById('recipientAddress').value;
    const recipientCity = document.getElementById('recipientCity').value;
    const recipientPostalCode = document.getElementById('recipientPostalCode').value;
    const recipientCountry = document.getElementById('recipientCountry').value;
    
    if (!weight || !length || !width || !height || !senderAddress || !senderCity || !senderPostalCode || !senderCountry || 
        !recipientAddress || !recipientCity || !recipientPostalCode || !recipientCountry || !packageType) {
        showNotification('Please fill in all required package information and address fields first', 'warning');
        return;
    }
    
    // Show loading
    const optionsContainer = document.getElementById('shippingOptions');
    optionsContainer.innerHTML = '<div style="text-align: center; padding: 40px;"><div class="loading-spinner"></div><p style="margin-top: 16px; color: #6b7280;">Fetching real-time shipping rates...</p></div>';
    
    try {
        // Build query parameters for API call with structured addresses
        const params = new URLSearchParams({
            'origin.address': senderAddress,
            'origin.city': senderCity,
            'origin.postalCode': senderPostalCode,
            'origin.country': senderCountry,
            'destination.address': recipientAddress,
            'destination.city': recipientCity,
            'destination.postalCode': recipientPostalCode,
            'destination.country': recipientCountry,
            weight: weight,
            length: length,
            width: width,
            height: height,
            packageType: packageType,
            declaredValue: packageValue || '100'
        });

        console.log('📦 [DEBUG] Fetching dashboard rates with params:', params.toString());

        // Call the API endpoint
        const response = await fetch(`/dashboard/api/rates?${params}`);
        const data = await response.json();

        if (!data.success) {
            throw new Error(data.message || 'Failed to calculate rates');
        }

        // Display the real-time rates
        displayRealTimeShippingOptions(data.rates);

    } catch (error) {
        console.error('💥 [DEBUG] Rate calculation error:', error);
        optionsContainer.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #ef4444;">
                <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
                <p>Failed to calculate shipping rates. Please try again.</p>
                <button class="btn btn-secondary" onclick="calculateRates()" style="margin-top: 16px;">
                    <i class="fas fa-redo"></i> Retry
                </button>
            </div>
        `;
    }
}

function displayRealTimeShippingOptions(rates) {
    const optionsContainer = document.getElementById('shippingOptions');
    
    if (!rates || rates.length === 0) {
        optionsContainer.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #6b7280;">
                <i class="fas fa-info-circle" style="font-size: 48px; margin-bottom: 16px; opacity: 0.5;"></i>
                <p>No shipping rates available for this route.</p>
            </div>
        `;
        return;
    }
    
    optionsContainer.innerHTML = rates.map((rate, index) => {
        const isAvailable = rate.available === true;
        const isMaintenanceMode = rate.maintenanceMode === true;
        const isDHL = rate.carrier === 'DHL';
        
        return `
            <div class="shipping-option ${!isAvailable ? 'disabled' : ''}" ${isAvailable ? `onclick="selectShippingOption(${index})"` : ''} style="${!isAvailable ? 'opacity: 0.6; cursor: not-allowed;' : ''}">
                <input type="radio" name="shippingOption" value="${index}" id="option${index}" ${!isAvailable ? 'disabled' : ''}>
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <div style="display: flex; align-items: center; gap: 16px;">
                        <div class="carrier-logo" style="background: ${isDHL ? '#dc2626' : isMaintenanceMode ? '#f59e0b' : '#6b7280'}; color: white;">
                            ${rate.carrier}
                        </div>
                        <div>
                            <div style="font-weight: 600; color: #032330; font-size: 16px; display: flex; align-items: center; gap: 8px;">
                                ${rate.service}
                                ${isDHL && isAvailable && rate.isLive ? 
                                    '<span style="background: #10b981; color: white; padding: 2px 6px; border-radius: 12px; font-size: 10px;"><i class="fas fa-wifi"></i> LIVE</span>' : ''
                                }
                                ${isDHL && isAvailable && !rate.isLive && rate.isDynamic ? 
                                    '<span style="background: #3b82f6; color: white; padding: 2px 6px; border-radius: 12px; font-size: 10px;"><i class="fas fa-calculator"></i> ESTIMATED</span>' : ''
                                }
                                ${isMaintenanceMode ? 
                                    '<span style="background: #f59e0b; color: white; padding: 2px 6px; border-radius: 12px; font-size: 10px;"><i class="fas fa-tools"></i> MAINTENANCE</span>' : ''
                                }
                            </div>
                            <div style="color: #6b7280; font-size: 14px;">Delivery: ${rate.deliveryTime}</div>
                            ${isMaintenanceMode ? 
                                `<div style="color: #f59e0b; font-size: 12px;"><i class="fas fa-exclamation-triangle"></i> ${rate.message || 'API integration in development'}</div>` : ''
                            }
                        </div>
                    </div>
                    <div style="text-align: right;">
                        ${isAvailable ? 
                            `<div style="font-size: 24px; font-weight: 700; color: #10b981;">£${rate.baseRate.toFixed(2)}</div>` :
                            `<div style="font-size: 16px; font-weight: 600; color: #6b7280;">Unavailable</div>`
                        }
                        ${isAvailable && isDHL && rate.isLive ? '<div style="font-size: 12px; color: #10b981;">Live API rate</div>' : ''}
                        ${isAvailable && isDHL && !rate.isLive && rate.isDynamic ? '<div style="font-size: 12px; color: #3b82f6;">Dynamic estimate</div>' : ''}
                    </div>
                </div>
                ${isAvailable && isDHL ? 
                    `<div style="margin-top: 12px; display: flex; flex-wrap: gap: 8px;">
                        <span style="background: #dcfce7; color: #166534; padding: 4px 8px; border-radius: 12px; font-size: 11px;">✓ Real-time Tracking</span>
                        <span style="background: #dcfce7; color: #166534; padding: 4px 8px; border-radius: 12px; font-size: 11px;">✓ Live GPS</span>
                        <span style="background: #dcfce7; color: #166534; padding: 4px 8px; border-radius: 12px; font-size: 11px;">✓ Insurance Available</span>
                    </div>` : ''
                }
            </div>
        `;
    }).join('');
    
    // Store rate data for form submission
    window.availableRates = rates;
}

function selectShippingOption(index) {
    // Remove previous selections
    document.querySelectorAll('.shipping-option').forEach(option => {
        option.classList.remove('selected');
    });
    
    // Select clicked option
    event.currentTarget.classList.add('selected');
    document.getElementById(`option${index}`).checked = true;
}

function saveDraft() {
    console.log('Saving shipment as draft...');
    showNotification('Shipment saved as draft!', 'success');
}

function previewShipment() {
    console.log('Opening shipment preview...');
    
    // Validate required fields first
    const requiredFields = [
        'senderName', 'senderPhone', 'senderEmail', 'senderAddress',
        'recipientName', 'recipientPhone', 'recipientAddress',
        'packageType', 'packageWeight', 'packageLength', 'packageWidth', 'packageHeight', 'packageDescription'
    ];
    
    let isValid = true;
    const formData = {};
    
    requiredFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (!field.value.trim()) {
            field.style.borderColor = '#ef4444';
            isValid = false;
        } else {
            field.style.borderColor = '#e5e7eb';
            formData[fieldId] = field.value.trim();
        }
    });
    
    if (!isValid) {
        showNotification('Please fill in all required fields before preview', 'error');
        return;
    }
    
    // Get optional fields
    formData.senderCompany = document.getElementById('senderCompany').value.trim();
    formData.recipientCompany = document.getElementById('recipientCompany').value.trim();
    formData.recipientEmail = document.getElementById('recipientEmail').value.trim();
    formData.packageValue = document.getElementById('packageValue').value.trim();
    
    // Get selected shipping option if available
    const selectedOption = document.querySelector('input[name="shippingOption"]:checked');
    let shippingInfo = null;
    if (selectedOption && window.availableRates) {
        const selectedIndex = parseInt(selectedOption.value);
        const selectedRate = window.availableRates[selectedIndex];
        if (selectedRate) {
            shippingInfo = {
                carrier: selectedRate.carrier,
                service: selectedRate.service,
                cost: selectedRate.baseRate.toFixed(2),
                deliveryTime: selectedRate.deliveryTime
            };
        }
    }
    
    // Create and show preview modal
    showPreviewModal(formData, shippingInfo);
}

function showPreviewModal(formData, shippingInfo) {
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.3s ease;
    `;
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: white;
        border-radius: 12px;
        padding: 24px;
        max-width: 600px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.3s ease;
    `;
    
    modalContent.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #e5e7eb; padding-bottom: 16px;">
            <h3 style="margin: 0; color: #032330; font-size: 20px;">Shipment Preview</h3>
            <button onclick="closePreviewModal()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280;">&times;</button>
        </div>
        
        <div style="display: grid; gap: 20px;">
            <!-- Sender Information -->
            <div>
                <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px; font-weight: 600;">Sender Information</h4>
                <div style="background: #f9fafb; padding: 16px; border-radius: 8px;">
                    <p style="margin: 4px 0;"><strong>Name:</strong> ${formData.senderName}</p>
                    ${formData.senderCompany ? `<p style="margin: 4px 0;"><strong>Company:</strong> ${formData.senderCompany}</p>` : ''}
                    <p style="margin: 4px 0;"><strong>Phone:</strong> ${formData.senderPhone}</p>
                    <p style="margin: 4px 0;"><strong>Email:</strong> ${formData.senderEmail}</p>
                    <p style="margin: 4px 0;"><strong>Address:</strong> ${formData.senderAddress}</p>
                </div>
            </div>
            
            <!-- Recipient Information -->
            <div>
                <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px; font-weight: 600;">Recipient Information</h4>
                <div style="background: #f9fafb; padding: 16px; border-radius: 8px;">
                    <p style="margin: 4px 0;"><strong>Name:</strong> ${formData.recipientName}</p>
                    ${formData.recipientCompany ? `<p style="margin: 4px 0;"><strong>Company:</strong> ${formData.recipientCompany}</p>` : ''}
                    <p style="margin: 4px 0;"><strong>Phone:</strong> ${formData.recipientPhone}</p>
                    ${formData.recipientEmail ? `<p style="margin: 4px 0;"><strong>Email:</strong> ${formData.recipientEmail}</p>` : ''}
                    <p style="margin: 4px 0;"><strong>Address:</strong> ${formData.recipientAddress}</p>
                </div>
            </div>
            
            <!-- Package Information -->
            <div>
                <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px; font-weight: 600;">Package Information</h4>
                <div style="background: #f9fafb; padding: 16px; border-radius: 8px;">
                    <p style="margin: 4px 0;"><strong>Type:</strong> ${formData.packageType}</p>
                    <p style="margin: 4px 0;"><strong>Weight:</strong> ${formData.packageWeight} kg</p>
                    <p style="margin: 4px 0;"><strong>Dimensions:</strong> ${formData.packageLength} × ${formData.packageWidth} × ${formData.packageHeight} cm</p>
                    ${formData.packageValue ? `<p style="margin: 4px 0;"><strong>Declared Value:</strong> $${formData.packageValue}</p>` : ''}
                    <p style="margin: 4px 0;"><strong>Description:</strong> ${formData.packageDescription}</p>
                </div>
            </div>
            
            ${shippingInfo ? `
            <!-- Shipping Information -->
            <div>
                <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px; font-weight: 600;">Shipping Information</h4>
                <div style="background: #ecfdf5; padding: 16px; border-radius: 8px; border-left: 4px solid #10b981;">
                    <p style="margin: 4px 0;"><strong>Carrier:</strong> ${shippingInfo.carrier}</p>
                    <p style="margin: 4px 0;"><strong>Service:</strong> ${shippingInfo.service}</p>
                    <p style="margin: 4px 0;"><strong>Cost:</strong> £${shippingInfo.cost}</p>
                    <p style="margin: 4px 0;"><strong>Delivery Time:</strong> ${shippingInfo.deliveryTime}</p>
                </div>
            </div>
            ` : `
            <div>
                <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px; font-weight: 600;">Shipping Information</h4>
                <div style="background: #fef3c7; padding: 16px; border-radius: 8px; border-left: 4px solid #f59e0b;">
                    <p style="margin: 4px 0; color: #92400e;"><i class="fas fa-exclamation-triangle"></i> Please calculate shipping rates first</p>
                </div>
            </div>
            `}
            
            <!-- Additional Services -->
            <div>
                <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px; font-weight: 600;">Additional Services</h4>
                <div style="background: #f9fafb; padding: 16px; border-radius: 8px;">
                    <p style="margin: 4px 0;"><strong>Insurance:</strong> ${document.getElementById('insurance').checked ? 'Yes' : 'No'}</p>
                    <p style="margin: 4px 0;"><strong>Signature Required:</strong> ${document.getElementById('signature').checked ? 'Yes' : 'No'}</p>
                    <p style="margin: 4px 0;"><strong>Real-time Tracking:</strong> ${document.getElementById('tracking').checked ? 'Yes' : 'No'}</p>
                    <p style="margin: 4px 0;"><strong>Notifications:</strong> ${document.getElementById('notifications').checked ? 'Yes' : 'No'}</p>
                </div>
            </div>
        </div>
        
        <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 24px; padding-top: 20px; border-top: 2px solid #e5e7eb;">
            <button onclick="closePreviewModal()" class="btn btn-secondary">
                <i class="fas fa-times"></i>
                Close
            </button>
            <button onclick="proceedFromPreview()" class="btn btn-primary">
                <i class="fas fa-check"></i>
                Looks Good - Create Shipment
            </button>
        </div>
    `;
    
    modalOverlay.appendChild(modalContent);
    document.body.appendChild(modalOverlay);
    
    // Store modal reference for closing
    window.currentPreviewModal = modalOverlay;
}

function closePreviewModal() {
    if (window.currentPreviewModal) {
        window.currentPreviewModal.remove();
        window.currentPreviewModal = null;
    }
}

function proceedFromPreview() {
    closePreviewModal();
    // Trigger the form submission
    document.getElementById('shipmentForm').dispatchEvent(new Event('submit'));
}

function createShipment() {
    // Validate required fields
    const requiredFields = [
        'senderName', 'senderPhone', 'senderEmail', 'senderAddress',
        'recipientName', 'recipientPhone', 'recipientAddress',
        'packageType', 'packageWeight', 'packageLength', 'packageWidth', 'packageHeight', 'packageDescription'
    ];
    
    let isValid = true;
    requiredFields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (!field.value.trim()) {
            field.style.borderColor = '#ef4444';
            isValid = false;
        } else {
            field.style.borderColor = '#e5e7eb';
        }
    });
    
    // Check if shipping option is selected
    const selectedOption = document.querySelector('input[name="shippingOption"]:checked');
    if (!selectedOption) {
        showNotification('Please select a shipping option', 'warning');
        return;
    }
    
    if (!isValid) {
        showNotification('Please fill in all required fields', 'error');
        return;
    }
    
    // Collect form data
    const formData = {};
    requiredFields.forEach(fieldId => {
        formData[fieldId] = document.getElementById(fieldId).value.trim();
    });
    
    // Add optional fields
    formData.senderCompany = document.getElementById('senderCompany').value.trim();
    formData.recipientCompany = document.getElementById('recipientCompany').value.trim();
    formData.recipientEmail = document.getElementById('recipientEmail').value.trim();
    formData.packageValue = document.getElementById('packageValue').value.trim();
    
    // Get selected rate data from stored rates
    const selectedIndex = parseInt(selectedOption.value);
    const selectedRate = window.availableRates ? window.availableRates[selectedIndex] : null;
    
    if (selectedRate) {
        formData.selectedCarrier = selectedRate.carrier;
        formData.selectedService = selectedRate.service;
        // Use totalRate (includes admin fees) instead of baseRate
        formData.shippingCost = parseFloat(selectedRate.totalRate || selectedRate.baseRate).toFixed(2);
        formData.serviceCode = selectedRate.serviceCode;
    } else {
        formData.selectedCarrier = 'DHL Express';
        formData.selectedService = 'Express Worldwide';
        formData.shippingCost = '45.99';
    }
    
    console.log('Form data shipping cost:', formData.shippingCost, typeof formData.shippingCost);
    
    // Show loading state
    showNotification('Saving shipment as draft...', 'info');
    
    // Save as draft first
    fetch('/dashboard/api/save-shipment-data', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification('Shipment saved as draft successfully!', 'success');
            
            // Store shipment ID for payment
            window.currentShipmentId = data.shipmentId;
            
            // Show payment modal after brief delay
            setTimeout(() => {
                showPaymentModal(formData, selectedRate);
            }, 1000);
        } else {
            showNotification(data.message || 'Failed to save shipment data', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showNotification('Failed to save shipment data', 'error');
    });
}

function showPaymentModal(formData, selectedRate) {
    // Create modal overlay
    const modalOverlay = document.createElement('div');
    modalOverlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.3s ease;
    `;
    
    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
        background: white;
        border-radius: 12px;
        padding: 24px;
        max-width: 500px;
        width: 90%;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        animation: slideIn 0.3s ease;
    `;
    
    const shippingCost = selectedRate ? parseFloat(selectedRate.totalRate || selectedRate.baseRate).toFixed(2) : parseFloat(formData.shippingCost).toFixed(2);
    const serviceName = selectedRate ? selectedRate.service : formData.selectedService;
    const carrierName = selectedRate ? selectedRate.carrier : formData.selectedCarrier;
    
    // Store payment amount globally for easy access
    window.currentPaymentAmount = parseFloat(shippingCost);
    
    console.log('Payment modal - shipping cost:', shippingCost, typeof shippingCost);
    console.log('Payment modal - stored amount:', window.currentPaymentAmount, typeof window.currentPaymentAmount);
    
    modalContent.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #e5e7eb; padding-bottom: 16px;">
            <h3 style="margin: 0; color: #032330; font-size: 20px;">Complete Payment</h3>
            <button onclick="closePaymentModal()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280;">&times;</button>
        </div>
        
        <!-- Order Summary -->
        <div style="margin-bottom: 24px;">
            <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px; font-weight: 600;">Order Summary</h4>
            <div style="background: #f9fafb; padding: 16px; border-radius: 8px;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                    <span>From:</span>
                    <span style="font-weight: 500;">${formData.senderName}</span>
                </div>
                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                    <span>To:</span>
                    <span style="font-weight: 500;">${formData.recipientName}</span>
                </div>
                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                    <span>Service:</span>
                    <span style="font-weight: 500;">${carrierName} - ${serviceName}</span>
                </div>
                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                    <span>Package:</span>
                    <span style="font-weight: 500;">${formData.packageType} (${formData.packageWeight}kg)</span>
                </div>
                <hr style="margin: 12px 0; border: none; border-top: 1px solid #e5e7eb;">
                <div style="display: flex; justify-content: space-between; font-size: 18px; font-weight: 600; color: #032330;">
                    <span>Total:</span>
                    <span>£${shippingCost}</span>
                </div>
            </div>
        </div>
        
        <!-- Payment Methods -->
        <div style="margin-bottom: 24px;">
            <h4 style="margin: 0 0 12px 0; color: #374151; font-size: 16px; font-weight: 600;">Select Payment Method</h4>
            <div style="display: grid; gap: 12px;">
                <button onclick="processPayment('stripe')" class="payment-btn" style="
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 12px;
                    padding: 16px;
                    border: 2px solid #e5e7eb;
                    border-radius: 8px;
                    background: white;
                    cursor: pointer;
                    transition: all 0.2s;
                    font-size: 16px;
                    font-weight: 500;
                " onmouseover="this.style.borderColor='#3b82f6'; this.style.backgroundColor='#eff6ff';" onmouseout="this.style.borderColor='#e5e7eb'; this.style.backgroundColor='white';">
                    <i class="fab fa-cc-stripe" style="font-size: 24px; color: #635bff;"></i>
                    Pay with Stripe
                </button>
                
                <button onclick="processPayment('paypal')" class="payment-btn" style="
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 12px;
                    padding: 16px;
                    border: 2px solid #e5e7eb;
                    border-radius: 8px;
                    background: white;
                    cursor: pointer;
                    transition: all 0.2s;
                    font-size: 16px;
                    font-weight: 500;
                " onmouseover="this.style.borderColor='#0070ba'; this.style.backgroundColor='#f0f8ff';" onmouseout="this.style.borderColor='#e5e7eb'; this.style.backgroundColor='white';">
                    <i class="fab fa-paypal" style="font-size: 24px; color: #0070ba;"></i>
                    Pay with PayPal
                </button>
            </div>
        </div>
        
        <!-- Loading State -->
        <div id="paymentLoading" style="display: none; text-align: center; padding: 20px;">
            <div style="display: inline-block; width: 32px; height: 32px; border: 3px solid #f3f3f3; border-top: 3px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
            <p style="margin-top: 12px; color: #6b7280;">Processing payment...</p>
        </div>
        
        <div style="display: flex; gap: 12px; justify-content: flex-end; margin-top: 24px; padding-top: 20px; border-top: 2px solid #e5e7eb;">
            <button onclick="closePaymentModal()" class="btn btn-secondary">
                <i class="fas fa-times"></i>
                Cancel
            </button>
        </div>
    `;
    
    modalOverlay.appendChild(modalContent);
    document.body.appendChild(modalOverlay);
    
    // Store modal reference for closing
    window.currentPaymentModal = modalOverlay;
    
    // Add CSS animations
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);
}

function closePaymentModal() {
    if (window.currentPaymentModal) {
        window.currentPaymentModal.remove();
        window.currentPaymentModal = null;
    }
}

async function processPayment(method) {
    if (!window.currentShipmentId) {
        showNotification('Shipment ID not found. Please try again.', 'error');
        return;
    }
    
    console.log('Processing payment:', {
        method: method,
        shipmentId: window.currentShipmentId,
        amount: window.currentPaymentAmount,
        amountType: typeof window.currentPaymentAmount
    });
    
    // Show loading state
    const loadingDiv = document.getElementById('paymentLoading');
    const paymentBtns = document.querySelectorAll('.payment-btn');
    
    paymentBtns.forEach(btn => btn.style.display = 'none');
    loadingDiv.style.display = 'block';
    
    try {
        if (method === 'stripe') {
            // Create payment intent
            const response = await fetch('/api/payments/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    shipmentId: window.currentShipmentId,
                    provider: 'stripe',
                    amount: window.currentPaymentAmount
                })
            });
            
            const responseData = await response.json();
            
            if (!responseData.success) {
                throw new Error(responseData.message || 'Failed to create payment');
            }
            
            const { clientSecret } = responseData.data;
            
            if (!clientSecret) {
                throw new Error('No client secret received from server');
            }
            
            // Initialize Stripe Elements
            if (!window.stripePublishableKey || window.stripePublishableKey === 'pk_test_your_stripe_key') {
                throw new Error('Stripe is not properly configured. Please contact support.');
            }
            const stripe = Stripe(window.stripePublishableKey);
            const elements = stripe.elements({
                clientSecret,
                appearance: {
                    theme: 'stripe',
                    variables: {
                        colorPrimary: '#0d6efd',
                        colorBackground: '#ffffff',
                        colorText: '#212529',
                        colorDanger: '#dc3545',
                        fontFamily: 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
                        spacingUnit: '4px',
                        borderRadius: '4px',
                    },
                },
            });
            
            // Replace payment modal content with Stripe Elements
            const modalContent = document.querySelector('#paymentLoading').parentNode;
            modalContent.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; border-bottom: 2px solid #e5e7eb; padding-bottom: 16px;">
                    <h3 style="margin: 0; color: #032330; font-size: 20px;">Complete Payment</h3>
                    <button onclick="closePaymentModal()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280;">&times;</button>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <p style="margin: 0; color: #374151;">Amount: <strong>£${window.currentPaymentAmount.toFixed(2)}</strong></p>
                </div>
                
                <div id="stripe-payment-element" style="margin-bottom: 20px;"></div>
                
                <button id="stripe-submit-btn" disabled style="
                    width: 100%;
                    padding: 12px;
                    background: #635bff;
                    color: white;
                    border: none;
                    border-radius: 6px;
                    font-size: 16px;
                    font-weight: 500;
                    cursor: pointer;
                    opacity: 0.6;
                ">
                    Loading payment form...
                </button>
                
                <div id="payment-status" style="margin-top: 16px;"></div>
            `;
            
            // Wait for DOM to be ready then create and mount payment element
            setTimeout(() => {
                try {
                    const paymentElementContainer = document.getElementById('stripe-payment-element');
                    if (!paymentElementContainer) {
                        throw new Error('Payment element container not found');
                    }
                    
                    const paymentElement = elements.create('payment');
                    
                    // Store payment element globally for confirmation
                    window.currentPaymentElement = paymentElement;
                    
                    paymentElement.mount('#stripe-payment-element');
                    
                    // Handle mounting events
                    paymentElement.on('ready', () => {
                        console.log('Stripe Elements ready');
                        const submitBtn = document.getElementById('stripe-submit-btn');
                        submitBtn.disabled = false;
                        submitBtn.style.opacity = '1';
                        submitBtn.innerHTML = `Pay £${window.currentPaymentAmount.toFixed(2)}`;
                    });
                    
                    paymentElement.on('change', (event) => {
                        const statusElement = document.getElementById('payment-status');
                        if (event.error) {
                            statusElement.innerHTML = `
                                <div style="color: #dc3545; padding: 12px; background: #f8d7da; border-radius: 4px;">
                                    ${event.error.message}
                                </div>
                            `;
                        } else {
                            statusElement.innerHTML = '';
                        }
                    });
                    
                    paymentElement.on('loaderror', (event) => {
                        console.error('Stripe Elements load error:', event.error);
                        document.getElementById('payment-status').innerHTML = `
                            <div style="color: #dc3545; padding: 12px; background: #f8d7da; border-radius: 4px;">
                                Failed to load payment form: ${event.error.message}
                            </div>
                        `;
                    });
                } catch (error) {
                    console.error('Payment element creation error:', error);
                    document.getElementById('payment-status').innerHTML = `
                        <div style="color: #dc3545; padding: 12px; background: #f8d7da; border-radius: 4px;">
                            Failed to initialize payment form: ${error.message}
                        </div>
                    `;
                }
            }, 200);
            
            // Handle payment submission
            document.getElementById('stripe-submit-btn').addEventListener('click', async function() {
                const submitBtn = this;
                submitBtn.disabled = true;
                submitBtn.innerHTML = 'Processing...';
                
                try {
                    // Check if payment element is properly mounted
                    if (!window.currentPaymentElement) {
                        throw new Error('Payment form not ready. Please wait and try again.');
                    }
                    
                    const { error, paymentIntent } = await stripe.confirmPayment({
                        elements,
                        confirmParams: {
                            return_url: `${window.location.origin}/dashboard/tracking?created=true`,
                        },
                        redirect: 'if_required'
                    });
                    
                    if (error) {
                        throw new Error(error.message);
                    }
                    
                    if (paymentIntent.status === 'succeeded') {
                        // Update shipment status
                        const updateResponse = await fetch('/dashboard/api/process-payment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                shipmentId: window.currentShipmentId,
                                paymentMethod: 'stripe',
                                amount: window.currentPaymentAmount
                            })
                        });
                        
                        const updateData = await updateResponse.json();
                        
                        if (updateData.success) {
                            closePaymentModal();
                            showNotification(`Payment successful! Tracking: ${updateData.trackingNumber}`, 'success');
                            
                            // Reset form and redirect
                            document.getElementById('shipmentForm').reset();
                            setTimeout(() => {
                                window.location.href = `/dashboard/tracking?id=${updateData.trackingNumber}`;
                            }, 2000);
                        } else {
                            throw new Error(updateData.message || 'Failed to update shipment');
                        }
                    }
                } catch (error) {
                    console.error('Payment error:', error);
                    document.getElementById('payment-status').innerHTML = `
                        <div style="color: #dc3545; padding: 12px; background: #f8d7da; border-radius: 4px;">
                            Payment failed: ${error.message}
                        </div>
                    `;
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = `Pay £${window.currentPaymentAmount.toFixed(2)}`;
                }
            });
            
        } else if (method === 'paypal') {
            // Create PayPal order with fixed amount
            const response = await fetch('/api/payments/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    shipmentId: window.currentShipmentId,
                    provider: 'paypal',
                    amount: window.currentPaymentAmount
                })
            });
            
            const responseData = await response.json();
            
            if (!responseData.success) {
                throw new Error(responseData.message || 'Failed to create PayPal order');
            }
            
            // Redirect to PayPal approval URL with fixed amount
            window.location.href = responseData.data.approvalUrl;
        }
        
    } catch (error) {
        console.error('Payment error:', error);
        
        // Hide loading and show buttons again
        loadingDiv.style.display = 'none';
        paymentBtns.forEach(btn => btn.style.display = 'flex');
        
        showNotification('Payment processing failed: ' + error.message, 'error');
    }
}

function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 16px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        z-index: 10000;
        animation: slideIn 0.3s ease;
    `;
    
    const colors = {
        success: '#10b981',
        error: '#ef4444',
        warning: '#f59e0b',
        info: '#3b82f6'
    };
    notification.style.background = colors[type] || colors.info;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// Add CSS for loading spinner
const style = document.createElement('style');
style.textContent = `
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #032330;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
`;
document.head.appendChild(style);
</script>
