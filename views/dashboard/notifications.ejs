<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notifications - DXpress Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .notifications-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }

        .notifications-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .notifications-title {
            font-size: 2rem;
            font-weight: 700;
            color: #032330;
        }

        .notifications-actions {
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn:hover {
            opacity: 0.9;
        }

        .notification-filters {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .filter-row {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .filter-select {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .notifications-list {
            background: linear-gradient(145deg, #ffffff 0%, #fafbfc 100%);
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.06), 0 1px 2px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
        }

        .notification-item {
            padding: 1.5rem;
            border-bottom: 1px solid rgba(241, 245, 249, 0.6);
            display: flex;
            align-items: flex-start;
            gap: 1.25rem;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            position: relative;
            border-radius: 16px;
            margin: 0.75rem;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .notification-item:last-child {
            border-bottom: none;
        }

        .notification-item:hover {
            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
            transform: translateY(-2px) scale(1.01);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.12), 0 4px 16px rgba(0, 0, 0, 0.08);
            border-color: rgba(59, 130, 246, 0.2);
        }

        .notification-item.unread {
            background: linear-gradient(135deg, #eff6ff 0%, #f0f9ff 50%, #ffffff 100%);
            border-left: 5px solid #3b82f6;
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15), 0 3px 10px rgba(59, 130, 246, 0.1);
            border: 1px solid rgba(59, 130, 246, 0.2);
            position: relative;
            overflow: hidden;
        }
        
        .notification-item.unread::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 2px;
            background: linear-gradient(90deg, #3b82f6, #60a5fa, #3b82f6);
            animation: shimmer 2s infinite;
        }
        
        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }
        
        .notification-item.unread::before {
            content: '';
            position: absolute;
            top: 1rem;
            right: 1rem;
            width: 8px;
            height: 8px;
            background: #3b82f6;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.2); }
            100% { opacity: 1; transform: scale(1); }
        }

        .notification-icon {
            width: 56px;
            height: 56px;
            border-radius: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.4rem;
            flex-shrink: 0;
            position: relative;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 2px solid rgba(255, 255, 255, 0.3);
        }
        
        .notification-icon::after {
            content: '';
            position: absolute;
            inset: -2px;
            border-radius: 14px;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.3), transparent);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .notification-item:hover .notification-icon::after {
            opacity: 1;
        }

        .notification-icon.info { 
            background: linear-gradient(135deg, #3b82f6 0%, #60a5fa 50%, #93c5fd 100%); 
            color: #ffffff; 
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4), 0 4px 12px rgba(59, 130, 246, 0.3);
        }
        .notification-icon.success { 
            background: linear-gradient(135deg, #10b981 0%, #34d399 50%, #6ee7b7 100%); 
            color: #ffffff; 
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4), 0 4px 12px rgba(16, 185, 129, 0.3);
        }
        .notification-icon.warning { 
            background: linear-gradient(135deg, #f59e0b 0%, #fbbf24 50%, #fde047 100%); 
            color: #ffffff; 
            box-shadow: 0 8px 25px rgba(245, 158, 11, 0.4), 0 4px 12px rgba(245, 158, 11, 0.3);
        }
        .notification-icon.error { 
            background: linear-gradient(135deg, #ef4444 0%, #f87171 50%, #fca5a5 100%); 
            color: #ffffff; 
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.4), 0 4px 12px rgba(239, 68, 68, 0.3);
        }
        .notification-icon.shipment { 
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 50%, #a855f7 100%); 
            color: #ffffff; 
            box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4), 0 4px 12px rgba(99, 102, 241, 0.3);
        }
        .notification-icon.payment { 
            background: linear-gradient(135deg, #059669 0%, #10b981 50%, #34d399 100%); 
            color: #ffffff; 
            box-shadow: 0 8px 25px rgba(5, 150, 105, 0.4), 0 4px 12px rgba(5, 150, 105, 0.3);
        }

        .notification-content {
            flex: 1;
        }

        .notification-title {
            font-weight: 700;
            color: #0f172a;
            margin-bottom: 0.75rem;
            font-size: 1.2rem;
            line-height: 1.3;
            letter-spacing: -0.025em;
            background: linear-gradient(135deg, #0f172a 0%, #334155 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .notification-message {
            color: #64748b;
            line-height: 1.7;
            margin-bottom: 1rem;
            font-size: 1rem;
            font-weight: 400;
        }

        .notification-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.875rem;
            color: #94a3b8;
            margin-top: 0.5rem;
            padding-top: 0.75rem;
            border-top: 1px solid rgba(241, 245, 249, 0.5);
        }

        .notification-time {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .notification-actions {
            display: flex;
            gap: 0.5rem;
        }

        .notification-action {
            padding: 0.5rem 1rem;
            border: 1px solid rgba(59, 130, 246, 0.2);
            border-radius: 12px;
            background: linear-gradient(135deg, rgba(59, 130, 246, 0.05) 0%, rgba(59, 130, 246, 0.1) 100%);
            color: #3b82f6;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(4px);
        }

        .notification-action:hover {
            background: linear-gradient(135deg, #3b82f6 0%, #60a5fa 100%);
            color: white;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

        .notification-action.primary {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }

        .notification-action.primary:hover {
            background: #2563eb;
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #64748b;
            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
            border-radius: 20px;
            border: 1px solid rgba(241, 245, 249, 0.6);
        }
        
        .empty-state i {
            font-size: 4rem;
            color: #cbd5e1;
            margin-bottom: 1.5rem;
            display: block;
        }
        
        .empty-state h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #334155;
            margin-bottom: 0.75rem;
        }
        
        .empty-state p {
            font-size: 1rem;
            line-height: 1.6;
            max-width: 400px;
            margin: 0 auto;
            opacity: 0.3;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #64748b;
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            margin-top: 2rem;
        }

        .pagination button {
            padding: 0.5rem 1rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            background: white;
            color: #374151;
            cursor: pointer;
            transition: all 0.2s;
        }

        .pagination button:hover:not(:disabled) {
            background: #f3f4f6;
        }

        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination .active {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }

        .unread-badge {
            background: #ef4444;
            color: white;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="notifications-container">
        <div class="notifications-header">
            <h1 class="notifications-title">
                <i class="fas fa-bell"></i>
                Notifications
                <span id="unreadBadge" class="unread-badge" style="display: none;">0</span>
            </h1>
            <div class="notifications-actions">
                <button class="btn btn-secondary" onclick="markAllAsRead()">
                    <i class="fas fa-check"></i>
                    Mark All Read
                </button>
                <button class="btn btn-primary" onclick="refreshNotifications()">
                    <i class="fas fa-refresh"></i>
                    Refresh
                </button>
            </div>
        </div>

        <div class="notification-filters">
            <div class="filter-row">
                <div class="filter-group">
                    <label>Category:</label>
                    <select id="categoryFilter" class="filter-select" onchange="filterNotifications()">
                        <option value="">All Categories</option>
                        <option value="shipment_update">Shipment Updates</option>
                        <option value="payment_status">Payment Status</option>
                        <option value="system_announcement">System Announcements</option>
                        <option value="general">General</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Type:</label>
                    <select id="typeFilter" class="filter-select" onchange="filterNotifications()">
                        <option value="">All Types</option>
                        <option value="info">Info</option>
                        <option value="success">Success</option>
                        <option value="warning">Warning</option>
                        <option value="error">Error</option>
                        <option value="shipment">Shipment</option>
                        <option value="payment">Payment</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Status:</label>
                    <select id="readFilter" class="filter-select" onchange="filterNotifications()">
                        <option value="">All</option>
                        <option value="false">Unread</option>
                        <option value="true">Read</option>
                        <option value="archived">Archived</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="notifications-list" id="notificationsList">
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i>
                Loading notifications...
            </div>
        </div>

        <div class="pagination" id="pagination" style="display: none;">
            <button id="prevBtn" onclick="changePage(-1)">
                <i class="fas fa-chevron-left"></i>
                Previous
            </button>
            <span id="pageInfo">Page 1 of 1</span>
            <button id="nextBtn" onclick="changePage(1)">
                Next
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>

    <!-- Notification Sound Script -->
    <script src="/assets/sounds/notification.js"></script>

    <script>
        let currentPage = 1;
        let totalPages = 1;
        let currentFilters = {};
        
        // Safe localStorage wrapper
        function getStorageItem(key, defaultValue = 'true') {
            try {
                if (typeof Storage !== 'undefined' && localStorage) {
                    const value = localStorage.getItem(key);
                    return value !== null ? value : defaultValue;
                }
            } catch (error) {
                console.warn('localStorage not available:', error);
            }
            return defaultValue;
        }

        function setStorageItem(key, value) {
            try {
                if (typeof Storage !== 'undefined' && localStorage) {
                    localStorage.setItem(key, value);
                    return true;
                }
            } catch (error) {
                console.warn('Failed to save to localStorage:', error);
            }
            return false;
        }

        // Notification sound settings
        let notificationSoundEnabled = getStorageItem('notificationSoundEnabled', 'true') !== 'false';

        // Load notifications
        async function loadNotifications(page = 1, filters = {}) {
            try {
                const params = new URLSearchParams({
                    page: page.toString(),
                    limit: '10',
                    ...filters
                });

                const response = await fetch(`/dashboard/api/notifications?${params}`);
                const data = await response.json();

                if (data.success) {
                    displayNotifications(data.notifications);
                    updatePagination(data.pagination);
                    updateUnreadBadge(data.unreadCount);
                } else {
                    showError('Failed to load notifications');
                }
            } catch (error) {
                console.error('Error loading notifications:', error);
                showError('Failed to load notifications');
            }
        }

        // Display notifications
        function displayNotifications(notifications) {
            const container = document.getElementById('notificationsList');
            
            if (!notifications || notifications.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-bell-slash"></i>
                        <h3>No notifications found</h3>
                        <p>You're all caught up! No notifications match your current filters.</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = notifications.map(notification => `
                <div class="notification-item ${!notification.isRead ? 'unread' : ''}" 
                     onclick="handleNotificationClick('${notification._id}', '${notification.actionUrl || ''}')">
                    <div class="notification-icon ${notification.type}">
                        <i class="fas fa-${getNotificationIcon(notification.type)}"></i>
                    </div>
                    <div class="notification-content">
                        <div class="notification-title">${notification.title}</div>
                        <div class="notification-message">${notification.message}</div>
                        <div class="notification-meta">
                            <div class="notification-time">
                                <i class="fas fa-clock"></i>
                                ${formatTime(notification.createdAt)}
                            </div>
                            <div class="notification-actions">
                                ${!notification.isRead ? `<button class="notification-action primary" onclick="event.stopPropagation(); markAsRead(['${notification._id}'])">Mark Read</button>` : ''}
                                ${notification.actionUrl ? `<button class="notification-action" onclick="event.stopPropagation(); window.open('${notification.actionUrl}', '_blank')">${notification.actionText || 'View'}</button>` : ''}
                                <button class="notification-action" onclick="event.stopPropagation(); archiveNotification('${notification._id}')">Archive</button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Get icon for notification type
        function getNotificationIcon(type) {
            const icons = {
                info: 'info-circle',
                success: 'check-circle',
                warning: 'exclamation-triangle',
                error: 'times-circle',
                shipment: 'box',
                payment: 'credit-card',
                system: 'cog'
            };
            return icons[type] || 'bell';
        }

        // Format time
        function formatTime(timestamp) {
            const date = new Date(timestamp);
            const now = new Date();
            const diff = now - date;
            
            if (diff < 60000) return 'Just now';
            if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;
            if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;
            return date.toLocaleDateString();
        }

        // Handle notification click
        function handleNotificationClick(notificationId, actionUrl) {
            // Mark as read if unread
            markAsRead([notificationId]);
            
            // Navigate to action URL if provided
            if (actionUrl) {
                window.location.href = actionUrl;
            }
        }

        // Mark notifications as read
        async function markAsRead(notificationIds) {
            try {
                const response = await fetch('/dashboard/api/notifications/mark-read', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ notificationIds })
                });

                const result = await response.json();
                if (result.success) {
                    loadNotifications(currentPage, currentFilters);
                }
            } catch (error) {
                console.error('Error marking as read:', error);
            }
        }

        // Mark all as read
        async function markAllAsRead() {
            try {
                // Get all unread notification IDs from current view
                const unreadElements = document.querySelectorAll('.notification-item.unread');
                const notificationIds = Array.from(unreadElements).map(el => 
                    el.getAttribute('onclick').match(/'([^']+)'/)[1]
                );

                if (notificationIds.length > 0) {
                    await markAsRead(notificationIds);
                }
            } catch (error) {
                console.error('Error marking all as read:', error);
            }
        }

        // Archive notification
        async function archiveNotification(notificationId) {
            try {
                const response = await fetch('/dashboard/api/notifications/archive', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ notificationIds: [notificationId] })
                });

                const result = await response.json();
                if (result.success) {
                    loadNotifications(currentPage, currentFilters);
                }
            } catch (error) {
                console.error('Error archiving notification:', error);
            }
        }

        // Filter notifications
        function filterNotifications() {
            const category = document.getElementById('categoryFilter').value;
            const type = document.getElementById('typeFilter').value;
            const isRead = document.getElementById('readFilter').value;

            currentFilters = {};
            if (category) currentFilters.category = category;
            if (type) currentFilters.type = type;
            if (isRead !== '') {
                if (isRead === 'archived') {
                    currentFilters.archived = 'true';
                } else {
                    currentFilters.isRead = isRead;
                }
            }

            currentPage = 1;
            loadNotifications(currentPage, currentFilters);
        }

        // Update pagination
        function updatePagination(pagination) {
            currentPage = pagination.page;
            totalPages = pagination.pages;

            const paginationEl = document.getElementById('pagination');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const pageInfo = document.getElementById('pageInfo');

            if (totalPages > 1) {
                paginationEl.style.display = 'flex';
                prevBtn.disabled = currentPage === 1;
                nextBtn.disabled = currentPage === totalPages;
                pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
            } else {
                paginationEl.style.display = 'none';
            }
        }

        // Change page
        function changePage(direction) {
            const newPage = currentPage + direction;
            if (newPage >= 1 && newPage <= totalPages) {
                loadNotifications(newPage, currentFilters);
            }
        }

        // Update unread badge
        function updateUnreadBadge(count) {
            const badge = document.getElementById('unreadBadge');
            if (count > 0) {
                badge.textContent = count;
                badge.style.display = 'inline';
            } else {
                badge.style.display = 'none';
            }
        }

        // Refresh notifications
        function refreshNotifications() {
            loadNotifications(currentPage, currentFilters);
        }

        // Show error
        function showError(message) {
            const container = document.getElementById('notificationsList');
            container.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Error</h3>
                    <p>${message}</p>
                    <button class="btn btn-primary" onclick="refreshNotifications()">Try Again</button>
                </div>
            `;
        }

        // Load notifications on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadNotifications();
        });

        // Play notification sound
        async function playNotificationSound() {
            console.log('playNotificationSound called, enabled:', notificationSoundEnabled);
            if (notificationSoundEnabled && window.playGeneratedNotificationSound) {
                try {
                    console.log('Attempting to play notification sound...');
                    const played = await window.playGeneratedNotificationSound();
                    console.log('Sound play result:', played);
                    if (!played) {
                        console.warn('Sound was blocked - user interaction may be required');
                    }
                } catch (error) {
                    console.warn('Failed to play notification sound:', error);
                }
            } else {
                console.log('Sound not enabled or function not available:', {
                    enabled: notificationSoundEnabled,
                    functionExists: !!window.playGeneratedNotificationSound
                });
            }
        }

        // Toggle notification sound setting
        function toggleNotificationSound() {
            notificationSoundEnabled = !notificationSoundEnabled;
            setStorageItem('notificationSoundEnabled', notificationSoundEnabled);
            
            // Update UI if settings toggle exists
            const toggle = document.getElementById('soundToggle');
            if (toggle) {
                toggle.checked = notificationSoundEnabled;
            }
        }

        // Enhanced refresh with sound for new notifications
        let lastNotificationCount = 0;
        async function refreshNotifications() {
            const oldCount = lastNotificationCount;
            await loadNotifications(currentPage, currentFilters);
            
            // Play sound if new notifications arrived
            const currentCount = document.querySelectorAll('.notification-item.unread').length;
            if (currentCount > oldCount && oldCount > 0) {
                playNotificationSound();
            }
            lastNotificationCount = currentCount;
        }

        // WebSocket integration for real-time notifications
        function initializeWebSocket() {
            if (typeof io !== 'undefined') {
                try {
                    const socket = io({
                        timeout: 5000,
                        reconnection: true,
                        reconnectionAttempts: 3,
                        reconnectionDelay: 1000
                    });
                    
                    socket.on('connect', function() {
                        console.log('WebSocket connected for notifications');
                    });
                    
                    socket.on('disconnect', function() {
                        console.log('WebSocket disconnected');
                    });
                    
                    socket.on('connect_error', function(error) {
                        console.warn('WebSocket connection error:', error);
                    });
                    
                    socket.on('new-notification', function(notification) {
                        try {
                            console.log('Received new notification via WebSocket:', notification);
                            
                            // Play sound for new notifications
                            playNotificationSound();
                            
                            // Add visual feedback - show toast notification
                            if (notification && (notification.title || notification.message)) {
                                showNewNotificationToast(notification);
                            }
                            
                            // Refresh the notifications list
                            setTimeout(() => {
                                refreshNotifications();
                            }, 1000);
                        } catch (error) {
                            console.warn('Error handling new notification:', error);
                        }
                    });
                    
                    window.notificationSocket = socket;
                } catch (error) {
                    console.warn('Failed to initialize WebSocket:', error);
                }
            } else {
                console.log('Socket.IO not available, using polling for notifications');
            }
        }

        // Show toast notification for new notifications
        function showNewNotificationToast(notification) {
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                max-width: 350px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 16px;
                border-radius: 12px;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
                z-index: 1000;
                animation: slideInToast 0.4s ease;
                cursor: pointer;
                border-left: 4px solid #3b82f6;
            `;
            
            toast.innerHTML = `
                <div style="display: flex; align-items: center; gap: 12px;">
                    <div style="width: 32px; height: 32px; background: rgba(255,255,255,0.2); border-radius: 8px; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-bell"></i>
                    </div>
                    <div style="flex: 1;">
                        <div style="font-weight: 600; margin-bottom: 4px;">${notification.title || 'New Notification'}</div>
                        <div style="font-size: 14px; opacity: 0.9; line-height: 1.4;">${notification.message || 'You have a new notification'}</div>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; opacity: 0.7; padding: 4px;">×</button>
                </div>
            `;
            
            toast.onclick = function() {
                window.location.href = '/dashboard/notifications';
            };
            
            document.body.appendChild(toast);
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.style.animation = 'slideOutToast 0.4s ease';
                    setTimeout(() => toast.remove(), 400);
                }
            }, 5000);
        }

        // Add toast animation styles
        const toastStyle = document.createElement('style');
        toastStyle.textContent = `
            @keyframes slideInToast {
                from { transform: translateX(100%) scale(0.8); opacity: 0; }
                to { transform: translateX(0) scale(1); opacity: 1; }
            }
            @keyframes slideOutToast {
                from { transform: translateX(0) scale(1); opacity: 1; }
                to { transform: translateX(100%) scale(0.8); opacity: 0; }
            }
        `;
        document.head.appendChild(toastStyle);

        // Initialize WebSocket on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeWebSocket();
            
            // Enable audio context on first user interaction
            const enableAudioOnInteraction = () => {
                if (window.playGeneratedNotificationSound) {
                    // This will initialize the audio context
                    window.playGeneratedNotificationSound().then(() => {
                        console.log('Audio context activated on user interaction');
                    }).catch(() => {
                        console.log('Audio context activation attempted');
                    });
                }
                // Remove listeners after first interaction
                document.removeEventListener('click', enableAudioOnInteraction);
                document.removeEventListener('keydown', enableAudioOnInteraction);
                document.removeEventListener('touchstart', enableAudioOnInteraction);
            };
            
            // Add interaction listeners
            document.addEventListener('click', enableAudioOnInteraction, { once: true });
            document.addEventListener('keydown', enableAudioOnInteraction, { once: true });
            document.addEventListener('touchstart', enableAudioOnInteraction, { once: true });
        });

        // Auto-refresh every 30 seconds
        setInterval(refreshNotifications, 30000);
    </script>
</body>
</html>
