
<!-- Invoice Stats -->
<div id="invoiceStats" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 24px;">
    <!-- Stats will be populated by JavaScript -->
</div>

<!-- Invoice Management -->
<div class="dashboard-card">
    <div class="card-header">
        <div class="card-icon">
            <i class="fas fa-file-invoice-dollar"></i>
        </div>
        <div>
            <div class="card-title">Invoice Management</div>
            <div class="card-subtitle">Invoices are automatically generated based on completed payments</div>
        </div>
    </div>
    
    <!-- Filters and Search -->
    <div style="margin: 20px 0; padding: 20px; background: #f9fafb; border-radius: 10px;">
        <div style="display: flex; flex-wrap: wrap; gap: 16px; align-items: center;">
            <div style="flex: 1; min-width: 250px;">
                <input type="text" id="searchInvoices" placeholder="Search invoices..." style="width: 100%; padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;">
            </div>
            <div>
                <select id="statusFilter" style="padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;">
                    <option value="">All Status</option>
                    <option value="paid">Paid</option>
                    <option value="pending">Pending</option>
                    <option value="overdue">Overdue</option>
                    <option value="draft">Draft</option>
                </select>
            </div>
            <div>
                <select id="dateFilter" style="padding: 12px 16px; border: 2px solid #e5e7eb; border-radius: 10px; font-size: 14px;">
                    <option value="">All Time</option>
                    <option value="today">Today</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="quarter">This Quarter</option>
                </select>
            </div>
            <button class="btn btn-secondary" onclick="exportAllInvoices()">
                <i class="fas fa-download"></i>
                Export All
            </button>
        </div>
    </div>
    <div style="margin-top: 20px; overflow-x: auto;">
        <table style="width: 100%; border-collapse: collapse;">
            <thead>
                <tr style="background: #f9fafb; border-bottom: 2px solid #e5e7eb;">
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">Invoice #</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">Customer</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">Amount</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">Status</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">Date</th>
                    <th style="padding: 16px; text-align: left; font-weight: 600; color: #374151;">Due Date</th>
                    <th style="padding: 16px; text-align: center; font-weight: 600; color: #374151;">Actions</th>
                </tr>
            </thead>
            <tbody id="invoicesTableBody">
                <!-- Empty state will be populated by JavaScript -->
            </tbody>
        </table>
    </div>
</div>

<style>
.status-badge {
    padding: 4px 8px;
    border-radius: 6px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    display: inline-block;
    white-space: nowrap;
    width: fit-content;
}

.status-badge.paid {
    background: #d1fae5;
    color: #065f46;
}

.status-badge.pending {
    background: #fef3c7;
    color: #92400e;
}

.status-badge.overdue {
    background: #fee2e2;
    color: #991b1b;
}

.status-badge.draft {
    background: #e5e7eb;
    color: #374151;
}

.action-btn {
    padding: 8px;
    background: #f3f4f6;
    border: none;
    border-radius: 6px;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.2s ease;
}

.action-btn:hover {
    background: #032330;
    color: white;
}

.stat-change.positive {
    color: #10b981;
}

.stat-change.negative {
    color: #ef4444;
}

.stat-change.neutral {
    color: #6b7280;
}

.status-badge.sent {
    background: #dbeafe;
    color: #1d4ed8;
}

.status-badge.viewed {
    background: #e0e7ff;
    color: #5b21b6;
}
</style>

<script>
// Global variables
let currentPage = 1;
let currentFilters = {};

// Load invoices on page load
document.addEventListener('DOMContentLoaded', function() {
    loadInvoices();
    loadStats();
    setupSearchFunctionality();
});

function loadInvoices(page = 1) {
    currentPage = page;
    const params = new URLSearchParams({
        page: page,
        limit: 10,
        ...currentFilters
    });

    fetch(`/dashboard/api/invoices?${params}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderInvoices(data.invoices);
                renderPagination(data.pagination);
            } else {
                showEmptyState('Error loading invoices');
            }
        })
        .catch(error => {
            console.error('Error loading invoices:', error);
            showEmptyState('Failed to load invoices');
        });
}

// Search functionality
function setupSearchFunctionality() {
    const searchInput = document.getElementById('searchInvoices');
    const statusFilter = document.getElementById('statusFilter');
    const dateFilter = document.getElementById('dateFilter');
    
    let searchTimeout;
    
    // Real-time search with debouncing
    searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            currentFilters.search = this.value.trim();
            loadInvoices(1);
        }, 300);
    });
    
    // Filter change handlers
    statusFilter.addEventListener('change', function() {
        currentFilters.status = this.value;
        loadInvoices(1);
    });
    
    dateFilter.addEventListener('change', function() {
        currentFilters.dateRange = this.value;
        loadInvoices(1);
    });
    
    // Clear search functionality
    searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            this.value = '';
            delete currentFilters.search;
            loadInvoices(1);
        }
    });
}

function loadStats() {
    fetch('/dashboard/api/invoices')
        .then(response => response.json())
        .then(data => {
            if (data.success && data.summary) {
                renderStats(data.summary);
            }
        })
        .catch(error => {
            console.error('Error loading stats:', error);
        });
}

function renderStats(summary) {
    const statsContainer = document.getElementById('invoiceStats');
    const totalRevenue = summary.totalAmount || 0;
    const paidAmount = summary.paidAmount || 0;
    const unpaidAmount = totalRevenue - paidAmount;
    const collectionRate = totalRevenue > 0 ? ((paidAmount / totalRevenue) * 100).toFixed(1) : 0;

    statsContainer.innerHTML = `
        <div class="stat-card">
            <div class="stat-icon" style="background: linear-gradient(135deg, #10b981, #059669);">
                <i class="fas fa-dollar-sign"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">Â£${totalRevenue.toFixed(2)}</div>
                <div class="stat-label">Total Revenue</div>
                <div class="stat-change ${totalRevenue > 0 ? 'positive' : 'neutral'}">Live data</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon" style="background: linear-gradient(135deg, #3b82f6, #1d4ed8);">
                <i class="fas fa-file-alt"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">${summary.totalInvoices || 0}</div>
                <div class="stat-label">Total Invoices</div>
                <div class="stat-change ${summary.totalInvoices > 0 ? 'positive' : 'neutral'}">Live data</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon" style="background: linear-gradient(135deg, #f59e0b, #d97706);">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">${summary.unpaidCount || 0}</div>
                <div class="stat-label">Pending Payment</div>
                <div class="stat-change ${summary.overdueCount > 0 ? 'negative' : 'neutral'}">${summary.overdueCount || 0} overdue</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed);">
                <i class="fas fa-percentage"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">${collectionRate}%</div>
                <div class="stat-label">Collection Rate</div>
                <div class="stat-change ${collectionRate > 80 ? 'positive' : collectionRate > 60 ? 'neutral' : 'negative'}">Live data</div>
            </div>
        </div>
    `;
}

function renderInvoices(invoices) {
    const tbody = document.getElementById('invoicesTableBody');
    
    if (!invoices || invoices.length === 0) {
        showEmptyState();
        return;
    }

    tbody.innerHTML = invoices.map(invoice => `
        <tr style="border-bottom: 1px solid #f3f4f6;">
            <td style="padding: 16px; font-weight: 600; color: #032330;">${invoice.invoiceNumber}</td>
            <td style="padding: 16px;">
                <div style="font-weight: 600; color: #374151;">${invoice.billTo.name}</div>
                <div style="font-size: 12px; color: #6b7280;">${invoice.billTo.email}</div>
            </td>
            <td style="padding: 16px; font-weight: 600; color: #032330;">${invoice.currency} ${invoice.totalAmount.toFixed(2)}</td>
            <td style="padding: 16px; text-align: right;">
                <span class="status-badge ${invoice.status}">${invoice.status.toUpperCase()}</span>
            </td>
            <td style="padding: 16px; color: #6b7280;">${new Date(invoice.issueDate).toLocaleDateString()}</td>
            <td style="padding: 16px; color: ${new Date(invoice.dueDate) < new Date() && invoice.status !== 'paid' ? '#ef4444' : '#6b7280'};">${new Date(invoice.dueDate).toLocaleDateString()}</td>
            <td style="padding: 16px; text-align: center;">
                <div style="display: flex; gap: 8px; justify-content: center;">
                    <button class="action-btn" onclick="viewInvoice('${invoice.invoiceNumber}')" title="View">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="action-btn" onclick="downloadInvoice('${invoice.invoiceNumber}')" title="Download">
                        <i class="fas fa-download"></i>
                    </button>
                    ${invoice.status === 'overdue' ? 
                        `<button class="action-btn" onclick="sendReminder('${invoice.invoiceNumber}')" title="Send Reminder">
                            <i class="fas fa-exclamation-triangle"></i>
                        </button>` :
                        `<button class="action-btn" onclick="sendInvoice('${invoice.invoiceNumber}')" title="Send">
                            <i class="fas fa-paper-plane"></i>
                        </button>`
                    }
                </div>
            </td>
        </tr>
    `).join('');
}

function showEmptyState(message = 'No invoices found') {
    const tbody = document.getElementById('invoicesTableBody');
    tbody.innerHTML = `
        <tr>
            <td colspan="6" style="text-align: center; padding: 60px 20px; color: #6b7280;">
                <div style="display: flex; flex-direction: column; align-items: center; gap: 16px;">
                    <i class="fas fa-file-invoice" style="font-size: 48px; opacity: 0.5;"></i>
                    <div>
                        <h3 style="margin: 0 0 8px 0; font-size: 18px; font-weight: 600;">${message}</h3>
                        <p style="margin: 0; font-size: 14px;">Invoices are automatically generated based on your payment transactions</p>
                        <p style="margin: 8px 0 0 0; font-size: 12px; opacity: 0.8;">Complete shipments and payments to see invoices here</p>
                    </div>
                </div>
            </td>
        </tr>
    `;
}

function renderPagination(pagination) {
    // Add pagination if needed
    if (pagination.totalPages > 1) {
        // Implementation for pagination controls
    }
}

function viewInvoice(invoiceId) {
    window.open(`/dashboard/invoices/view/${invoiceId}`, '_blank');
}

function downloadInvoice(invoiceId) {
    fetch(`/dashboard/api/invoices/${invoiceId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification(`Invoice ${invoiceId} download would start here`, 'info');
            } else {
                showNotification('Invoice not found', 'error');
            }
        })
        .catch(error => {
            showNotification('Failed to download invoice', 'error');
        });
}

function sendInvoice(invoiceId) {
    fetch(`/dashboard/api/invoices/${invoiceId}/send`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showNotification(`Invoice ${invoiceId} sent successfully!`, 'success');
            loadInvoices(currentPage);
        } else {
            showNotification(data.message || 'Failed to send invoice', 'error');
        }
    })
    .catch(error => {
        showNotification('Failed to send invoice', 'error');
    });
}

function sendReminder(invoiceId) {
    showNotification(`Payment reminder for ${invoiceId} would be sent here`, 'info');
}


// Export all invoices functionality
function exportAllInvoices() {
    const params = new URLSearchParams(currentFilters);
    
    // Show loading state
    const exportBtn = event.target.closest('button');
    const originalContent = exportBtn.innerHTML;
    exportBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Exporting...';
    exportBtn.disabled = true;
    
    fetch(`/dashboard/api/invoices/export?${params}`)
        .then(response => {
            if (!response.ok) throw new Error('Export failed');
            return response.blob();
        })
        .then(blob => {
            // Create download link
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `invoices_${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        })
        .catch(error => {
            console.error('Export error:', error);
            alert('Failed to export invoices. Please try again.');
        })
        .finally(() => {
            exportBtn.innerHTML = originalContent;
            exportBtn.disabled = false;
        });
}

function applyFilters() {
    const search = document.getElementById('searchInvoices').value;
    const status = document.getElementById('statusFilter').value;
    const date = document.getElementById('dateFilter').value;
    
    currentFilters = {};
    if (search) currentFilters.search = search;
    if (status) currentFilters.status = status;
    if (date) currentFilters.date = date;
    
    loadInvoices(1);
}

function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 16px 20px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        z-index: 10000;
        animation: slideIn 0.3s ease;
    `;
    
    const colors = {
        success: '#10b981',
        error: '#ef4444',
        warning: '#f59e0b',
        info: '#3b82f6'
    };
    notification.style.background = colors[type] || colors.info;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}
</script>

<style>
/* Remove excessive bottom spacing */
body {
    margin-bottom: 0 !important;
    padding-bottom: 0 !important;
}

.content-area {
    padding-bottom: 24px !important;
}
</style>
