DXPRESS MVC - USER DASHBOARD & DHL INTEGRATION
=====================================================

IMPORTANT CHANGES & IMPLEMENTATION NOTES
========================================

## NEW DATABASE MODELS CREATED:
1. **GlobalSettings.js** - Manages system-wide configuration including shipping rates, markup percentages, and enabled carriers
2. **UserProfile.js** - Extended user profiles with address book, shipping preferences, and statistics
3. **ShipmentRate.js** - Already existed, handles carrier-specific rate management

## BACKEND CONTROLLERS & API ENDPOINTS:
1. **controllers/dashboard.js** - New comprehensive controller with full DHL integration:
   - getDashboard() - Real-time dashboard with shipment statistics
   - createShipment() - DHL API integration for live shipment creation
   - trackShipment() - Live tracking with DHL API calls
   - getRates() - Global rate calculation with admin markup settings
   - getGPSTracking() - Live GPS coordinates from DHL API
   - getShipments() - User shipment management with pagination

2. **Updated routes/dashboard.js** - Added API endpoints:
   - GET /dashboard/api/rates - Calculate shipping rates
   - POST /dashboard/api/create-shipment - Create new shipments
   - GET /dashboard/api/track/:trackingNumber - Track shipments
   - GET /dashboard/api/shipments - Get user shipments
   - GET /dashboard/api/gps-tracking - Live GPS tracking

## FRONTEND INTEGRATION:
1. **create-shipment.ejs** - Updated to use real API calls instead of simulation
2. **rates.ejs** - Integrated with live DHL rates and "Coming Soon" carriers
3. **tracking.ejs** - Connected to live DHL tracking API

## DHL INTEGRATION FEATURES:
- **Live Rate Calculation**: Uses DHL API with global markup from admin settings
- **Shipment Creation**: Creates shipments in both local database and DHL system
- **Live Tracking**: Fetches real-time tracking updates from DHL API
- **GPS Coordinates**: Provides live location data for in-transit shipments
- **Error Handling**: Graceful fallbacks when DHL API is unavailable

## CARRIER SELECTION LOGIC:
- **DHL Express**: Fully enabled with live API integration
- **FedEx, UPS, USPS**: Marked as "Coming Soon" with disabled buttons
- **Rate Display**: Shows estimated rates for disabled carriers
- **UI Indicators**: Clear visual distinction between available and coming soon carriers

## GLOBAL RATE CALCULATION:
- Admin can set markup percentages via GlobalSettings
- Rates are calculated: DHL Base Rate × (1 + Markup %)
- Fallback rates provided when API is unavailable
- Currency handling (GBP default)

## SECURITY & AUTHENTICATION:
- All API endpoints protected with isAuthenticated + isUser middleware
- Role-based access control maintained
- User can only access their own shipments
- Proper error handling and validation

## CRITICAL SETUP REQUIREMENTS:
⚠️  **ENVIRONMENT VARIABLES NEEDED**:
- DHL_CLIENT_ID
- DHL_CLIENT_SECRET  
- DHL_ACCOUNT_NUMBER
- DHL_PICKUP_ACCOUNT
- DHL_API_BASE_URL

⚠️  **ADMIN CONFIGURATION REQUIRED**:
- Set shipping_markup_percentage in GlobalSettings (default: 15%)
- Set enabled_carriers array in GlobalSettings (default: ["dhl"])
- Configure DHL API credentials in production environment

## TESTING CONSIDERATIONS:
- Test with invalid DHL credentials to verify fallback behavior
- Verify rate calculations with different markup percentages
- Test shipment creation flow end-to-end
- Validate GPS tracking updates
- Check "Coming Soon" carrier display

## PRODUCTION READINESS:
✅ Database schemas are production-ready
✅ Error handling implemented
✅ Fallback mechanisms in place
✅ User authentication secured
✅ API rate limiting considerations built-in
✅ Responsive UI maintained

## POTENTIAL RISKS:
⚠️  DHL API rate limits - implement caching if high volume
⚠️  API downtime - fallback data ensures functionality continues
⚠️  Large shipment volumes - consider database indexing optimization
⚠️  GPS tracking frequency - balance between accuracy and API costs

## PERFORMANCE OPTIMIZATIONS IMPLEMENTED:
- Database indexes on frequently queried fields
- Efficient pagination for shipment lists
- Caching of DHL OAuth tokens
- Minimal API calls with proper error handling
- Optimized frontend JavaScript with proper loading states

## NEW PAYMENT INTEGRATION FEATURES:
✅ **Multi-Step Shipment Creation Process**:
   - Step 1: Save shipment data as draft (status: "draft", paymentStatus: "unpaid")
   - Step 2: Select carrier and calculate final cost
   - Step 3: Process payment and finalize shipment
   - Payment success → status: "processing", paymentStatus: "paid"
   - Payment failure → status: "payment_failed", paymentStatus: "unpaid"

✅ **Payment Processing Integration**:
   - Stripe integration with payment intents
   - PayPal integration with hosted buttons
   - Payment record creation with full audit trail
   - Automatic shipment status updates based on payment results
   - Webhook support for payment status callbacks

✅ **Payment Models & Database**:
   - Payment.js model with comprehensive payment tracking
   - Links payments to shipments and users
   - Stores payment method, transaction IDs, failure reasons
   - Supports refunds and payment metadata

## NEW NOTIFICATION SYSTEM FEATURES:
✅ **Comprehensive Notification System**:
   - Notification.js model with categories, types, priorities
   - User-specific notifications with read/unread status
   - Auto-expiring notifications support
   - Archive functionality for notification management

✅ **Admin Notification Management**:
   - Admin dashboard at /admin/notifications
   - Broadcast notifications to all users
   - Notification statistics and analytics
   - Recent notifications monitoring
   - Bulk notification management tools

✅ **In-App Notification Widget**:
   - Real-time notification bell with unread count
   - Dropdown notification list with recent items
   - Auto-refresh every 30 seconds
   - Toast notifications for immediate feedback
   - Mark as read/archive functionality

✅ **Notification Integration Points**:
   - Shipment creation notifications
   - Payment status notifications (success/failure)
   - Shipment status update notifications
   - System announcements from admin
   - Tracking update notifications

## CRITICAL PAYMENT SETUP REQUIREMENTS:
⚠️  **STRIPE CONFIGURATION**:
   - STRIPE_SECRET_KEY in environment variables
   - STRIPE_PUBLISHABLE_KEY for frontend
   - Webhook endpoints configured for payment status updates

⚠️  **PAYPAL CONFIGURATION**:
   - PAYPAL_HOSTED_BUTTON_ID for hosted buttons
   - PayPal webhook configuration for payment confirmations

⚠️  **PAYMENT FLOW TESTING**:
   - Test successful payment flow end-to-end
   - Test payment failure scenarios
   - Verify shipment status updates correctly
   - Test webhook payment callbacks

## NOTIFICATION SYSTEM SETUP:
⚠️  **NOTIFICATION ROUTES**:
   - Add notification routes to main app.js
   - Include notifications.js routes
   - Ensure proper middleware authentication

⚠️  **FRONTEND INTEGRATION**:
   - Include notifications.js in dashboard layouts
   - Add notification widget to navigation
   - Test real-time notification updates

## ADDITIONAL SECURITY CONSIDERATIONS:
⚠️  **Payment Security**:
   - Never store full credit card details
   - Use payment processor tokens only
   - Implement proper PCI compliance measures
   - Secure webhook endpoints with signature verification

⚠️  **Notification Security**:
   - Validate notification permissions per user
   - Sanitize notification content to prevent XSS
   - Rate limit notification creation to prevent spam
   - Implement notification content moderation

## NEW API ENDPOINTS ADDED:
**Payment Endpoints**:
- POST /dashboard/api/save-shipment-data
- POST /dashboard/api/select-carrier
- POST /dashboard/api/process-payment
- POST /dashboard/api/payment-callback

**Notification Endpoints**:
- GET /api/notifications
- GET /api/notifications/unread-count
- PATCH /api/notifications/mark-read
- PATCH /api/notifications/archive
- POST /api/admin/notifications/broadcast
- GET /api/admin/notifications/stats
